// Generated by rstantools.  Do not edit by hand.

/*
    ssEI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ssEI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ssEI.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_ssMND_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 109, column 1 to column 35)",
                                                      " (in 'string', line 110, column 1 to column 21)",
                                                      " (in 'string', line 113, column 2 to column 43)",
                                                      " (in 'string', line 114, column 2 to column 84)",
                                                      " (in 'string', line 117, column 9 to column 18)",
                                                      " (in 'string', line 117, column 20 to column 21)",
                                                      " (in 'string', line 117, column 2 to column 32)",
                                                      " (in 'string', line 118, column 9 to column 20)",
                                                      " (in 'string', line 118, column 22 to column 23)",
                                                      " (in 'string', line 118, column 2 to column 44)",
                                                      " (in 'string', line 122, column 7 to column 67)",
                                                      " (in 'string', line 123, column 7 to column 66)",
                                                      " (in 'string', line 121, column 20 to line 124, column 6)",
                                                      " (in 'string', line 121, column 6 to line 124, column 6)",
                                                      " (in 'string', line 120, column 18 to line 125, column 4)",
                                                      " (in 'string', line 120, column 4 to line 125, column 4)",
                                                      " (in 'string', line 119, column 22 to line 126, column 3)",
                                                      " (in 'string', line 119, column 2 to line 126, column 3)",
                                                      " (in 'string', line 127, column 2 to column 64)",
                                                      " (in 'string', line 102, column 1 to column 22)",
                                                      " (in 'string', line 103, column 1 to column 16)",
                                                      " (in 'string', line 104, column 1 to column 16)",
                                                      " (in 'string', line 105, column 17 to column 24)",
                                                      " (in 'string', line 105, column 26 to column 27)",
                                                      " (in 'string', line 105, column 1 to column 41)",
                                                      " (in 'string', line 106, column 17 to column 24)",
                                                      " (in 'string', line 106, column 26 to column 27)",
                                                      " (in 'string', line 106, column 1 to column 41)",
                                                      " (in 'string', line 109, column 13 to column 20)",
                                                      " (in 'string', line 109, column 22 to column 27)",
                                                      " (in 'string', line 109, column 29 to column 33)",
                                                      " (in 'string', line 110, column 18 to column 19)",
                                                      " (in 'string', line 110, column 9 to column 10)",
                                                      " (in 'string', line 113, column 28 to column 35)",
                                                      " (in 'string', line 113, column 37 to column 38)",
                                                      " (in 'string', line 113, column 40 to column 41)",
                                                      " (in 'string', line 16, column 12 to column 19)",
                                                      " (in 'string', line 16, column 21 to column 22)",
                                                      " (in 'string', line 16, column 5 to column 34)",
                                                      " (in 'string', line 17, column 12 to column 19)",
                                                      " (in 'string', line 17, column 21 to column 22)",
                                                      " (in 'string', line 17, column 5 to column 34)",
                                                      " (in 'string', line 18, column 21 to column 28)",
                                                      " (in 'string', line 18, column 30 to column 31)",
                                                      " (in 'string', line 18, column 33 to column 34)",
                                                      " (in 'string', line 18, column 5 to column 36)",
                                                      " (in 'string', line 19, column 5 to column 25)",
                                                      " (in 'string', line 20, column 5 to column 25)",
                                                      " (in 'string', line 21, column 5 to column 22)",
                                                      " (in 'string', line 22, column 5 to column 22)",
                                                      " (in 'string', line 23, column 5 to column 13)",
                                                      " (in 'string', line 24, column 5 to column 25)",
                                                      " (in 'string', line 25, column 5 to column 20)",
                                                      " (in 'string', line 27, column 5 to column 27)",
                                                      " (in 'string', line 28, column 5 to column 27)",
                                                      " (in 'string', line 30, column 5 to column 22)",
                                                      " (in 'string', line 31, column 5 to column 19)",
                                                      " (in 'string', line 33, column 7 to column 33)",
                                                      " (in 'string', line 37, column 11 to column 74)",
                                                      " (in 'string', line 38, column 11 to column 38)",
                                                      " (in 'string', line 39, column 11 to column 40)",
                                                      " (in 'string', line 40, column 11 to column 40)",
                                                      " (in 'string', line 41, column 11 to column 38)",
                                                      " (in 'string', line 42, column 11 to column 53)",
                                                      " (in 'string', line 43, column 11 to column 86)",
                                                      " (in 'string', line 44, column 11 to column 62)",
                                                      " (in 'string', line 45, column 11 to column 62)",
                                                      " (in 'string', line 46, column 11 to column 36)",
                                                      " (in 'string', line 47, column 11 to column 91)",
                                                      " (in 'string', line 36, column 27 to line 48, column 10)",
                                                      " (in 'string', line 36, column 9 to line 48, column 10)",
                                                      " (in 'string', line 49, column 9 to column 45)",
                                                      " (in 'string', line 50, column 9 to column 35)",
                                                      " (in 'string', line 51, column 9 to column 61)",
                                                      " (in 'string', line 52, column 9 to column 61)",
                                                      " (in 'string', line 35, column 25 to line 53, column 8)",
                                                      " (in 'string', line 35, column 7 to line 53, column 8)",
                                                      " (in 'string', line 56, column 9 to column 45)",
                                                      " (in 'string', line 57, column 9 to column 35)",
                                                      " (in 'string', line 58, column 9 to column 61)",
                                                      " (in 'string', line 59, column 9 to column 61)",
                                                      " (in 'string', line 55, column 25 to line 60, column 8)",
                                                      " (in 'string', line 55, column 7 to line 60, column 8)",
                                                      " (in 'string', line 61, column 7 to column 30)",
                                                      " (in 'string', line 32, column 25 to line 62, column 6)",
                                                      " (in 'string', line 32, column 5 to line 62, column 6)",
                                                      " (in 'string', line 65, column 4 to column 24)",
                                                      " (in 'string', line 66, column 4 to column 22)",
                                                      " (in 'string', line 7, column 114 to line 67, column 3)",
                                                      " (in 'string', line 72, column 12 to column 19)",
                                                      " (in 'string', line 72, column 4 to column 21)",
                                                      " (in 'string', line 73, column 11 to column 18)",
                                                      " (in 'string', line 73, column 4 to column 25)",
                                                      " (in 'string', line 74, column 11 to column 18)",
                                                      " (in 'string', line 74, column 4 to column 27)",
                                                      " (in 'string', line 75, column 4 to column 23)",
                                                      " (in 'string', line 78, column 6 to column 23)",
                                                      " (in 'string', line 79, column 6 to column 59)",
                                                      " (in 'string', line 80, column 6 to column 55)",
                                                      " (in 'string', line 77, column 21 to line 81, column 5)",
                                                      " (in 'string', line 77, column 4 to line 81, column 5)",
                                                      " (in 'string', line 82, column 4 to column 21)",
                                                      " (in 'string', line 70, column 48 to line 83, column 3)",
                                                      " (in 'string', line 86, column 12 to column 19)",
                                                      " (in 'string', line 86, column 4 to column 21)",
                                                      " (in 'string', line 87, column 17 to column 24)",
                                                      " (in 'string', line 87, column 4 to column 26)",
                                                      " (in 'string', line 88, column 11 to column 18)",
                                                      " (in 'string', line 88, column 4 to column 25)",
                                                      " (in 'string', line 89, column 11 to column 18)",
                                                      " (in 'string', line 89, column 4 to column 27)",
                                                      " (in 'string', line 90, column 4 to column 23)",
                                                      " (in 'string', line 93, column 6 to column 23)",
                                                      " (in 'string', line 94, column 6 to column 33)",
                                                      " (in 'string', line 95, column 6 to column 84)",
                                                      " (in 'string', line 96, column 6 to column 95)",
                                                      " (in 'string', line 92, column 21 to line 97, column 5)",
                                                      " (in 'string', line 92, column 4 to line 97, column 5)",
                                                      " (in 'string', line 98, column 4 to column 21)",
                                                      " (in 'string', line 84, column 51 to line 99, column 3)"};
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
ss_assign_cvals_lp(const int& n_areas, const int& R, const int& C,
                   const T3__& row_margins_arg__,
                   const T4__& col_margins_arg__,
                   const std::vector<std::vector<std::vector<T5__>>>& lambda,
                   T_lp__& lp__, T_lp_accum__& lp_accum__,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          T5__>;
  const auto& row_margins = to_ref(row_margins_arg__);
  const auto& col_margins = to_ref(col_margins_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 37;
    validate_non_negative_index("slack_row", "n_areas", n_areas);
    current_statement__ = 38;
    validate_non_negative_index("slack_row", "R", R);
    Eigen::Matrix<local_scalar_t__, -1, -1> slack_row;
    slack_row = Eigen::Matrix<local_scalar_t__, -1, -1>(n_areas, R);
    stan::math::fill(slack_row, DUMMY_VAR__);
    
    current_statement__ = 40;
    validate_non_negative_index("slack_col", "n_areas", n_areas);
    current_statement__ = 41;
    validate_non_negative_index("slack_col", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, -1> slack_col;
    slack_col = Eigen::Matrix<local_scalar_t__, -1, -1>(n_areas, C);
    stan::math::fill(slack_col, DUMMY_VAR__);
    
    current_statement__ = 43;
    validate_non_negative_index("cell_value", "n_areas", n_areas);
    current_statement__ = 44;
    validate_non_negative_index("cell_value", "R", R);
    current_statement__ = 45;
    validate_non_negative_index("cell_value", "C", C);
    std::vector<std::vector<std::vector<local_scalar_t__>>> cell_value;
    cell_value = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(R, std::vector<local_scalar_t__>(C, DUMMY_VAR__)));
    
    Eigen::Matrix<local_scalar_t__, -1, 1> lower_pos;
    lower_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(lower_pos, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> upper_pos;
    upper_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(upper_pos, DUMMY_VAR__);
    
    local_scalar_t__ lower_bound;
    lower_bound = DUMMY_VAR__;
    
    local_scalar_t__ upper_bound;
    upper_bound = DUMMY_VAR__;
    
    local_scalar_t__ rt;
    rt = DUMMY_VAR__;
    
    local_scalar_t__ this_inv_logit;
    this_inv_logit = DUMMY_VAR__;
    
    local_scalar_t__ log_det_J;
    log_det_J = DUMMY_VAR__;
    
    current_statement__ = 54;
    assign(slack_row, nil_index_list(), row_margins,
      "assigning variable slack_row");
    current_statement__ = 55;
    assign(slack_col, nil_index_list(), col_margins,
      "assigning variable slack_col");
    current_statement__ = 56;
    assign(lower_pos, cons_list(index_uni(1), nil_index_list()), 0.0,
      "assigning variable lower_pos");
    current_statement__ = 57;
    log_det_J = 0;
    current_statement__ = 86;
    for (int j = 1; j <= n_areas; ++j) {
      current_statement__ = 58;
      rt = sum(row(slack_row, j));
      current_statement__ = 77;
      for (int r = 1; r <= (R - 1); ++r) {
        current_statement__ = 71;
        for (int c = 1; c <= (C - 1); ++c) {
          current_statement__ = 59;
          assign(lower_pos, cons_list(index_uni(2), nil_index_list()),
            (rvalue(slack_row,
               cons_list(index_uni(j),
                 cons_list(index_uni(r), nil_index_list())), "slack_row") -
              sum(tail(row(slack_col, j), (C - c)))),
            "assigning variable lower_pos");
          current_statement__ = 60;
          lower_bound = max(lower_pos);
          current_statement__ = 61;
          assign(upper_pos, cons_list(index_uni(1), nil_index_list()),
            rvalue(slack_col,
              cons_list(index_uni(j),
                cons_list(index_uni(c), nil_index_list())), "slack_col"),
            "assigning variable upper_pos");
          current_statement__ = 62;
          assign(upper_pos, cons_list(index_uni(2), nil_index_list()),
            rvalue(slack_row,
              cons_list(index_uni(j),
                cons_list(index_uni(r), nil_index_list())), "slack_row"),
            "assigning variable upper_pos");
          current_statement__ = 63;
          upper_bound = min(upper_pos);
          current_statement__ = 64;
          this_inv_logit = inv_logit(lambda[(j - 1)][(r - 1)][(c - 1)]);
          current_statement__ = 65;
          assign(cell_value,
            cons_list(index_uni(j),
              cons_list(index_uni(r),
                cons_list(index_uni(c), nil_index_list()))),
            (lower_bound + (this_inv_logit * (upper_bound - lower_bound))),
            "assigning variable cell_value");
          current_statement__ = 66;
          assign(slack_col,
            cons_list(index_uni(j),
              cons_list(index_uni(c), nil_index_list())),
            (rvalue(slack_col,
               cons_list(index_uni(j),
                 cons_list(index_uni(c), nil_index_list())), "slack_col") -
              cell_value[(j - 1)][(r - 1)][(c - 1)]),
            "assigning variable slack_col");
          current_statement__ = 67;
          assign(slack_row,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())),
            (rvalue(slack_row,
               cons_list(index_uni(j),
                 cons_list(index_uni(r), nil_index_list())), "slack_row") -
              cell_value[(j - 1)][(r - 1)][(c - 1)]),
            "assigning variable slack_row");
          current_statement__ = 68;
          rt = (rt - cell_value[(j - 1)][(r - 1)][(c - 1)]);
          current_statement__ = 69;
          log_det_J = (log_det_J +
                        stan::math::log(
                          (((upper_bound - lower_bound) * this_inv_logit) *
                            (1 - this_inv_logit))));}
        current_statement__ = 72;
        assign(cell_value,
          cons_list(index_uni(j),
            cons_list(index_uni(r),
              cons_list(index_uni(C), nil_index_list()))),
          rvalue(slack_row,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())), "slack_row"),
          "assigning variable cell_value");
        current_statement__ = 73;
        rt = (rt - cell_value[(j - 1)][(r - 1)][(C - 1)]);
        current_statement__ = 74;
        assign(slack_col,
          cons_list(index_uni(j), cons_list(index_uni(C), nil_index_list())),
          (rvalue(slack_col,
             cons_list(index_uni(j),
               cons_list(index_uni(C), nil_index_list())), "slack_col") -
            cell_value[(j - 1)][(r - 1)][(C - 1)]),
          "assigning variable slack_col");
        current_statement__ = 75;
        assign(slack_row,
          cons_list(index_uni(j), cons_list(index_uni(r), nil_index_list())),
          (rvalue(slack_row,
             cons_list(index_uni(j),
               cons_list(index_uni(R), nil_index_list())), "slack_row") -
            cell_value[(j - 1)][(r - 1)][(C - 1)]),
          "assigning variable slack_row");}
      current_statement__ = 83;
      for (int c = 1; c <= (C - 1); ++c) {
        current_statement__ = 78;
        assign(cell_value,
          cons_list(index_uni(j),
            cons_list(index_uni(R),
              cons_list(index_uni(c), nil_index_list()))),
          rvalue(slack_col,
            cons_list(index_uni(j),
              cons_list(index_uni(c), nil_index_list())), "slack_col"),
          "assigning variable cell_value");
        current_statement__ = 79;
        rt = (rt - cell_value[(j - 1)][(R - 1)][(c - 1)]);
        current_statement__ = 80;
        assign(slack_col,
          cons_list(index_uni(j), cons_list(index_uni(c), nil_index_list())),
          (rvalue(slack_col,
             cons_list(index_uni(j),
               cons_list(index_uni(c), nil_index_list())), "slack_col") -
            cell_value[(j - 1)][(R - 1)][(c - 1)]),
          "assigning variable slack_col");
        current_statement__ = 81;
        assign(slack_row,
          cons_list(index_uni(j), cons_list(index_uni(R), nil_index_list())),
          (rvalue(slack_row,
             cons_list(index_uni(j),
               cons_list(index_uni(R), nil_index_list())), "slack_row") -
            cell_value[(j - 1)][(R - 1)][(c - 1)]),
          "assigning variable slack_row");}
      current_statement__ = 84;
      assign(cell_value,
        cons_list(index_uni(j),
          cons_list(index_uni(R), cons_list(index_uni(C), nil_index_list()))),
        rt, "assigning variable cell_value");}
    current_statement__ = 87;
    lp_accum__.add(log_det_J);
    current_statement__ = 88;
    return cell_value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ss_assign_cvals_lp_functor__ {
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
operator()(const int& n_areas, const int& R, const int& C,
           const T3__& row_margins, const T4__& col_margins,
           const std::vector<std::vector<std::vector<T5__>>>& lambda,
           T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return ss_assign_cvals_lp<propto__>(n_areas, R, C, row_margins, col_margins,
         lambda, lp__, lp_accum__, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
realmultinom_lpdf(const T0__& x_arg__, const T1__& theta_arg__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x = to_ref(x_arg__);
  const auto& theta = to_ref(theta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 90;
    validate_non_negative_index("N", "rows(x)", rows(x));
    std::vector<local_scalar_t__> N;
    N = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 92;
    validate_non_negative_index("lpdf", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lpdf;
    lpdf = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lpdf, DUMMY_VAR__);
    
    current_statement__ = 94;
    validate_non_negative_index("lmcoef", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lmcoef;
    lmcoef = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lmcoef, DUMMY_VAR__);
    
    int emts;
    emts = std::numeric_limits<int>::min();
    
    current_statement__ = 96;
    emts = rows(x);
    current_statement__ = 101;
    for (int k = 1; k <= emts; ++k) {
      current_statement__ = 97;
      assign(N, cons_list(index_uni(k), nil_index_list()),
        sum(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
        "assigning variable N");
      current_statement__ = 98;
      assign(lmcoef, cons_list(index_uni(k), nil_index_list()),
        (stan::math::lgamma((N[(k - 1)] + 1)) -
          sum(
            stan::math::lgamma(
              add(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
                1)))), "assigning variable lmcoef");
      current_statement__ = 99;
      assign(lpdf, cons_list(index_uni(k), nil_index_list()),
        (lmcoef[(k - 1)] +
          sum(
            elt_multiply(
              rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
              stan::math::log(
                rvalue(theta, cons_list(index_uni(k), nil_index_list()),
                  "theta"))))), "assigning variable lpdf");}
    current_statement__ = 102;
    return sum(lpdf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct realmultinom_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& theta, std::ostream* pstream__)  const 
{
return realmultinom_lpdf<propto__>(x, theta, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
realdirmultinom_lpdf(const T0__& x_arg__, const T1__& theta_arg__,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x = to_ref(x_arg__);
  const auto& theta = to_ref(theta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 104;
    validate_non_negative_index("N", "rows(x)", rows(x));
    std::vector<local_scalar_t__> N;
    N = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 106;
    validate_non_negative_index("theta_0", "rows(x)", rows(x));
    std::vector<local_scalar_t__> theta_0;
    theta_0 = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 108;
    validate_non_negative_index("lpdf", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lpdf;
    lpdf = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lpdf, DUMMY_VAR__);
    
    current_statement__ = 110;
    validate_non_negative_index("lmcoef", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lmcoef;
    lmcoef = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lmcoef, DUMMY_VAR__);
    
    int emts;
    emts = std::numeric_limits<int>::min();
    
    current_statement__ = 112;
    emts = rows(x);
    current_statement__ = 118;
    for (int k = 1; k <= emts; ++k) {
      current_statement__ = 113;
      assign(N, cons_list(index_uni(k), nil_index_list()),
        sum(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
        "assigning variable N");
      current_statement__ = 114;
      assign(theta_0, cons_list(index_uni(k), nil_index_list()),
        sum(
          rvalue(theta, cons_list(index_uni(k), nil_index_list()), "theta")),
        "assigning variable theta_0");
      current_statement__ = 115;
      assign(lmcoef, cons_list(index_uni(k), nil_index_list()),
        ((stan::math::lgamma(theta_0[(k - 1)]) +
           stan::math::lgamma((N[(k - 1)] + 1))) -
          stan::math::lgamma((N[(k - 1)] + theta_0[(k - 1)]))),
        "assigning variable lmcoef");
      current_statement__ = 116;
      assign(lpdf, cons_list(index_uni(k), nil_index_list()),
        (lmcoef[(k - 1)] +
          sum(
            subtract(
              subtract(
                stan::math::lgamma(
                  add(
                    rvalue(theta, cons_list(index_uni(k), nil_index_list()),
                      "theta"),
                    rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"))),
                stan::math::lgamma(
                  rvalue(theta, cons_list(index_uni(k), nil_index_list()),
                    "theta"))),
              stan::math::lgamma(
                add(
                  rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
                  1))))), "assigning variable lpdf");}
    current_statement__ = 119;
    return sum(lpdf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct realdirmultinom_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& theta, std::ostream* pstream__)  const 
{
return realdirmultinom_lpdf<propto__>(x, theta, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_ssMND final : public model_base_crtp<model_ssMND> {
private:
  int n_areas;
  int R;
  int C;
  Eigen::Matrix<double, -1, -1> row_margins;
  Eigen::Matrix<double, -1, -1> col_margins;
  int lambda_2dim__;
  int lambda_3dim__;
 
public:
  ~model_ssMND() { }
  
  inline std::string model_name() const final { return "model_ssMND"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_ssMND(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ssMND_namespace::model_ssMND";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","n_areas","int",
          context__.to_vec());
      n_areas = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      n_areas = context__.vals_i("n_areas")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "n_areas", n_areas, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization","R","int",
          context__.to_vec());
      R = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "R", R, 0);
      current_statement__ = 22;
      context__.validate_dims("data initialization","C","int",
          context__.to_vec());
      C = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "C", C, 0);
      current_statement__ = 23;
      validate_non_negative_index("row_margins", "n_areas", n_areas);
      current_statement__ = 24;
      validate_non_negative_index("row_margins", "R", R);
      current_statement__ = 25;
      context__.validate_dims("data initialization","row_margins","double",
          context__.to_vec(n_areas, R));
      row_margins = Eigen::Matrix<double, -1, -1>(n_areas, R);
      stan::math::fill(row_margins, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> row_margins_flat__;
        current_statement__ = 25;
        assign(row_margins_flat__, nil_index_list(),
          context__.vals_r("row_margins"),
          "assigning variable row_margins_flat__");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 25;
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            current_statement__ = 25;
            assign(row_margins,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              row_margins_flat__[(pos__ - 1)],
              "assigning variable row_margins");
            current_statement__ = 25;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 25;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 25;
          current_statement__ = 25;
          check_greater_or_equal(function__, "row_margins[sym1__, sym2__]",
                                 rvalue(row_margins,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "row_margins"), 0);
        }}
      current_statement__ = 26;
      validate_non_negative_index("col_margins", "n_areas", n_areas);
      current_statement__ = 27;
      validate_non_negative_index("col_margins", "C", C);
      current_statement__ = 28;
      context__.validate_dims("data initialization","col_margins","double",
          context__.to_vec(n_areas, C));
      col_margins = Eigen::Matrix<double, -1, -1>(n_areas, C);
      stan::math::fill(col_margins, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> col_margins_flat__;
        current_statement__ = 28;
        assign(col_margins_flat__, nil_index_list(),
          context__.vals_r("col_margins"),
          "assigning variable col_margins_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            current_statement__ = 28;
            assign(col_margins,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              col_margins_flat__[(pos__ - 1)],
              "assigning variable col_margins");
            current_statement__ = 28;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          current_statement__ = 28;
          current_statement__ = 28;
          check_greater_or_equal(function__, "col_margins[sym1__, sym2__]",
                                 rvalue(col_margins,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "col_margins"), 0);
        }}
      current_statement__ = 29;
      validate_non_negative_index("lambda", "n_areas", n_areas);
      current_statement__ = 30;
      lambda_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      lambda_2dim__ = (R - 1);
      current_statement__ = 30;
      validate_non_negative_index("lambda", "R - 1", lambda_2dim__);
      current_statement__ = 31;
      lambda_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      lambda_3dim__ = (C - 1);
      current_statement__ = 31;
      validate_non_negative_index("lambda", "C - 1", lambda_3dim__);
      current_statement__ = 32;
      validate_non_negative_index("theta", "R", R);
      current_statement__ = 33;
      validate_positive_index("theta", "C", C);
      current_statement__ = 34;
      validate_non_negative_index("cell_values", "n_areas", n_areas);
      current_statement__ = 35;
      validate_non_negative_index("cell_values", "R", R);
      current_statement__ = 36;
      validate_non_negative_index("cell_values", "C", C);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_areas * lambda_2dim__ * lambda_3dim__;
      num_params_r__ += R * (C - 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ssMND_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<std::vector<local_scalar_t__>>> lambda;
      lambda = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(lambda_2dim__, std::vector<local_scalar_t__>(lambda_3dim__, DUMMY_VAR__)));
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          current_statement__ = 1;
          for (int sym3__ = 1; sym3__ <= lambda_3dim__; ++sym3__) {
            current_statement__ = 1;
            assign(lambda,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym3__), nil_index_list()))),
              in__.scalar(), "assigning variable lambda");}}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> theta;
      theta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(R, Eigen::Matrix<local_scalar_t__, -1, 1>(C));
      stan::math::fill(theta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> theta_in__;
      theta_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(R, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (C - 1)));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        assign(theta_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((C - 1)), "assigning variable theta_in__");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(theta_in__[(sym1__ - 1)], lp__),
            "assigning variable theta");
        } else {
          current_statement__ = 2;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(theta_in__[(sym1__ - 1)]),
            "assigning variable theta");
        }}
      std::vector<std::vector<std::vector<local_scalar_t__>>> cell_values;
      cell_values = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(R, std::vector<local_scalar_t__>(C, DUMMY_VAR__)));
      
      current_statement__ = 4;
      assign(cell_values, nil_index_list(),
        ss_assign_cvals_lp<false>(n_areas, R, C, row_margins, col_margins,
          lambda, lp__, lp_accum__, pstream__),
        "assigning variable cell_values");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 3;
          for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
            current_statement__ = 3;
            current_statement__ = 3;
            check_greater_or_equal(function__,
                                   "cell_values[sym1__, sym2__, sym3__]",
                                   cell_values[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      {
        current_statement__ = 5;
        validate_non_negative_index("obs_prob", "n_areas * R", (n_areas * R));
        current_statement__ = 6;
        validate_non_negative_index("obs_prob", "C", C);
        Eigen::Matrix<local_scalar_t__, -1, -1> obs_prob;
        obs_prob = Eigen::Matrix<local_scalar_t__, -1, -1>((n_areas * R), C);
        stan::math::fill(obs_prob, DUMMY_VAR__);
        
        current_statement__ = 8;
        validate_non_negative_index("cell_values_matrix", "n_areas * R",
                                    (n_areas * R));
        current_statement__ = 9;
        validate_non_negative_index("cell_values_matrix", "C", C);
        Eigen::Matrix<local_scalar_t__, -1, -1> cell_values_matrix;
        cell_values_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(
          (n_areas * R), C);
        stan::math::fill(cell_values_matrix, DUMMY_VAR__);
        
        current_statement__ = 18;
        for (int j = 1; j <= n_areas; ++j) {
          current_statement__ = 16;
          for (int r = 1; r <= R; ++r) {
            current_statement__ = 14;
            for (int c = 1; c <= C; ++c) {
              current_statement__ = 11;
              assign(cell_values_matrix,
                cons_list(index_uni((((j - 1) * R) + r)),
                  cons_list(index_uni(c), nil_index_list())),
                cell_values[(j - 1)][(r - 1)][(c - 1)],
                "assigning variable cell_values_matrix");
              current_statement__ = 12;
              assign(obs_prob,
                cons_list(index_uni((((j - 1) * R) + r)),
                  cons_list(index_uni(c), nil_index_list())),
                (theta[(r - 1)][(c - 1)] *
                  rvalue(row_margins,
                    cons_list(index_uni(j),
                      cons_list(index_uni(r), nil_index_list())),
                    "row_margins")), "assigning variable obs_prob");}}}
        current_statement__ = 19;
        lp_accum__.add(
          realdirmultinom_lpdf<false>(cell_values_matrix,
            obs_prob, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ssMND_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<std::vector<double>>> lambda;
      lambda = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(lambda_2dim__, std::vector<double>(lambda_3dim__, std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          current_statement__ = 1;
          for (int sym3__ = 1; sym3__ <= lambda_3dim__; ++sym3__) {
            current_statement__ = 1;
            assign(lambda,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym3__), nil_index_list()))),
              in__.scalar(), "assigning variable lambda");}}}
      std::vector<Eigen::Matrix<double, -1, 1>> theta;
      theta = std::vector<Eigen::Matrix<double, -1, 1>>(R, Eigen::Matrix<double, -1, 1>(C));
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> theta_in__;
      theta_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(R, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (C - 1)));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        assign(theta_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((C - 1)), "assigning variable theta_in__");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_constrain(theta_in__[(sym1__ - 1)]),
          "assigning variable theta");}
      std::vector<std::vector<std::vector<double>>> cell_values;
      cell_values = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(R, std::vector<double>(C, std::numeric_limits<double>::quiet_NaN())));
      
      for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
            vars__.emplace_back(
              lambda[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          vars__.emplace_back(theta[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(cell_values, nil_index_list(),
        ss_assign_cvals_lp<false>(n_areas, R, C, row_margins, col_margins,
          lambda, lp__, lp_accum__, pstream__),
        "assigning variable cell_values");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 3;
          for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
            current_statement__ = 3;
            current_statement__ = 3;
            check_greater_or_equal(function__,
                                   "cell_values[sym1__, sym2__, sym3__]",
                                   cell_values[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              vars__.emplace_back(
                cell_values[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<std::vector<std::vector<double>>> lambda;
      lambda = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(lambda_2dim__, std::vector<double>(lambda_3dim__, std::numeric_limits<double>::quiet_NaN())));
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 1;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
            current_statement__ = 1;
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              current_statement__ = 1;
              assign(lambda,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                lambda_flat__[(pos__ - 1)], "assigning variable lambda");
              current_statement__ = 1;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> theta;
      theta = std::vector<Eigen::Matrix<double, -1, 1>>(R, Eigen::Matrix<double, -1, 1>(C));
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 2;
        assign(theta_flat__, nil_index_list(), context__.vals_r("theta"),
          "assigning variable theta_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 2;
            assign(theta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta_flat__[(pos__ - 1)], "assigning variable theta");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> theta_free__;
      theta_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(R, Eigen::Matrix<double, -1, 1>(
        (C - 1)));
      stan::math::fill(theta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        assign(theta_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_free(theta[(sym1__ - 1)]),
          "assigning variable theta_free__");}
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= lambda_3dim__; ++sym3__) {
            vars__.emplace_back(
              lambda[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (C - 1); ++sym2__) {
          vars__.emplace_back(theta_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("lambda");
    names__.emplace_back("theta");
    names__.emplace_back("cell_values");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(lambda_2dim__)
                                             ,
                                             static_cast<size_t>(lambda_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "cell_values" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= (C - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "cell_values" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_2dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_3dim__ << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"vector\",\"length\":" << C << "}},\"block\":\"parameters\"},{\"name\":\"cell_values\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"array\",\"length\":" << C << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_2dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_3dim__ << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (C - 1) << "}},\"block\":\"parameters\"},{\"name\":\"cell_values\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"array\",\"length\":" << C << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ssMND_namespace::model_ssMND;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ssMND_namespace::profiles__;
}
#endif
#endif
