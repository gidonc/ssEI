// Generated by rstantools.  Do not edit by hand.

/*
    ssEI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ssEI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ssEI.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_ssContextual_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 251, column 3 to column 33)",
                                                      " (in 'string', line 252, column 3 to column 34)",
                                                      " (in 'string', line 253, column 3 to column 24)",
                                                      " (in 'string', line 255, column 3 to column 37)",
                                                      " (in 'string', line 256, column 3 to column 37)",
                                                      " (in 'string', line 259, column 1 to column 35)",
                                                      " (in 'string', line 260, column 1 to column 42)",
                                                      " (in 'string', line 261, column 1 to column 41)",
                                                      " (in 'string', line 262, column 1 to column 35)",
                                                      " (in 'string', line 266, column 4 to column 43)",
                                                      " (in 'string', line 269, column 8 to column 96)",
                                                      " (in 'string', line 268, column 34 to line 270, column 6)",
                                                      " (in 'string', line 268, column 6 to line 270, column 6)",
                                                      " (in 'string', line 267, column 32 to line 271, column 4)",
                                                      " (in 'string', line 267, column 4 to line 271, column 4)",
                                                      " (in 'string', line 265, column 22 to line 272, column 2)",
                                                      " (in 'string', line 265, column 2 to line 272, column 2)",
                                                      " (in 'string', line 273, column 1 to column 90)",
                                                      " (in 'string', line 287, column 4 to column 46)",
                                                      " (in 'string', line 286, column 21 to line 288, column 3)",
                                                      " (in 'string', line 286, column 2 to line 288, column 3)",
                                                      " (in 'string', line 291, column 6 to column 109)",
                                                      " (in 'string', line 290, column 17 to line 292, column 5)",
                                                      " (in 'string', line 290, column 4 to line 292, column 5)",
                                                      " (in 'string', line 289, column 23 to line 293, column 3)",
                                                      " (in 'string', line 289, column 2 to line 293, column 3)",
                                                      " (in 'string', line 320, column 2 to column 21)",
                                                      " (in 'string', line 321, column 2 to column 21)",
                                                      " (in 'string', line 324, column 2 to column 32)",
                                                      " (in 'string', line 325, column 2 to column 35)",
                                                      " (in 'string', line 326, column 2 to column 32)",
                                                      " (in 'string', line 334, column 8 to column 78)",
                                                      " (in 'string', line 333, column 13 to line 335, column 7)",
                                                      " (in 'string', line 332, column 8 to column 47)",
                                                      " (in 'string', line 330, column 32 to line 333, column 7)",
                                                      " (in 'string', line 330, column 6 to line 335, column 7)",
                                                      " (in 'string', line 329, column 17 to line 336, column 5)",
                                                      " (in 'string', line 329, column 4 to line 336, column 5)",
                                                      " (in 'string', line 328, column 22 to line 337, column 3)",
                                                      " (in 'string', line 328, column 2 to line 337, column 3)",
                                                      " (in 'string', line 340, column 6 to column 68)",
                                                      " (in 'string', line 339, column 17 to line 341, column 5)",
                                                      " (in 'string', line 339, column 4 to line 341, column 5)",
                                                      " (in 'string', line 338, column 15 to line 342, column 3)",
                                                      " (in 'string', line 338, column 2 to line 342, column 3)",
                                                      " (in 'string', line 344, column 4 to column 52)",
                                                      " (in 'string', line 348, column 6 to column 66)",
                                                      " (in 'string', line 347, column 11 to line 349, column 5)",
                                                      " (in 'string', line 346, column 6 to column 50)",
                                                      " (in 'string', line 345, column 25 to line 347, column 5)",
                                                      " (in 'string', line 345, column 4 to line 349, column 5)",
                                                      " (in 'string', line 343, column 15 to line 350, column 3)",
                                                      " (in 'string', line 343, column 2 to line 350, column 3)",
                                                      " (in 'string', line 351, column 2 to column 17)",
                                                      " (in 'string', line 353, column 4 to column 52)",
                                                      " (in 'string', line 352, column 17 to line 354, column 3)",
                                                      " (in 'string', line 352, column 2 to line 354, column 3)",
                                                      " (in 'string', line 357, column 6 to column 54)",
                                                      " (in 'string', line 358, column 6 to column 32)",
                                                      " (in 'string', line 356, column 23 to line 359, column 5)",
                                                      " (in 'string', line 356, column 4 to line 359, column 5)",
                                                      " (in 'string', line 355, column 21 to line 360, column 3)",
                                                      " (in 'string', line 355, column 2 to line 360, column 3)",
                                                      " (in 'string', line 296, column 9 to column 18)",
                                                      " (in 'string', line 296, column 20 to column 21)",
                                                      " (in 'string', line 296, column 2 to column 32)",
                                                      " (in 'string', line 297, column 9 to column 20)",
                                                      " (in 'string', line 297, column 22 to column 23)",
                                                      " (in 'string', line 297, column 2 to column 44)",
                                                      " (in 'string', line 298, column 2 to column 18)",
                                                      " (in 'string', line 300, column 4 to column 28)",
                                                      " (in 'string', line 299, column 22 to line 301, column 3)",
                                                      " (in 'string', line 299, column 2 to line 301, column 3)",
                                                      " (in 'string', line 302, column 2 to column 20)",
                                                      " (in 'string', line 303, column 2 to column 29)",
                                                      " (in 'string', line 306, column 2 to column 23)",
                                                      " (in 'string', line 310, column 10 to column 70)",
                                                      " (in 'string', line 311, column 10 to column 71)",
                                                      " (in 'string', line 309, column 21 to line 313, column 9)",
                                                      " (in 'string', line 309, column 8 to line 313, column 9)",
                                                      " (in 'string', line 314, column 6 to column 19)",
                                                      " (in 'string', line 308, column 20 to line 315, column 7)",
                                                      " (in 'string', line 308, column 6 to line 315, column 7)",
                                                      " (in 'string', line 307, column 24 to line 316, column 5)",
                                                      " (in 'string', line 307, column 4 to line 316, column 5)",
                                                      " (in 'string', line 317, column 2 to column 64)",
                                                      " (in 'string', line 213, column 1 to column 22)",
                                                      " (in 'string', line 214, column 1 to column 16)",
                                                      " (in 'string', line 215, column 1 to column 16)",
                                                      " (in 'string', line 216, column 17 to column 24)",
                                                      " (in 'string', line 216, column 26 to column 27)",
                                                      " (in 'string', line 216, column 1 to column 41)",
                                                      " (in 'string', line 217, column 17 to column 24)",
                                                      " (in 'string', line 217, column 26 to column 27)",
                                                      " (in 'string', line 217, column 1 to column 41)",
                                                      " (in 'string', line 220, column 2 to column 19)",
                                                      " (in 'string', line 221, column 13 to column 20)",
                                                      " (in 'string', line 221, column 2 to column 22)",
                                                      " (in 'string', line 222, column 13 to column 20)",
                                                      " (in 'string', line 222, column 2 to column 22)",
                                                      " (in 'string', line 223, column 17 to column 24)",
                                                      " (in 'string', line 223, column 26 to column 31)",
                                                      " (in 'string', line 223, column 33 to column 38)",
                                                      " (in 'string', line 223, column 2 to column 40)",
                                                      " (in 'string', line 225, column 2 to column 18)",
                                                      " (in 'string', line 226, column 23 to column 30)",
                                                      " (in 'string', line 226, column 2 to column 32)",
                                                      " (in 'string', line 228, column 4 to column 18)",
                                                      " (in 'string', line 229, column 4 to column 18)",
                                                      " (in 'string', line 232, column 8 to column 23)",
                                                      " (in 'string', line 231, column 29 to line 233, column 7)",
                                                      " (in 'string', line 231, column 6 to line 233, column 7)",
                                                      " (in 'string', line 230, column 17 to line 234, column 5)",
                                                      " (in 'string', line 230, column 4 to line 234, column 5)",
                                                      " (in 'string', line 237, column 8 to column 23)",
                                                      " (in 'string', line 236, column 31 to line 238, column 7)",
                                                      " (in 'string', line 236, column 6 to line 238, column 7)",
                                                      " (in 'string', line 235, column 17 to line 239, column 5)",
                                                      " (in 'string', line 235, column 4 to line 239, column 5)",
                                                      " (in 'string', line 240, column 4 to column 46)",
                                                      " (in 'string', line 243, column 8 to column 70)",
                                                      " (in 'string', line 242, column 34 to line 244, column 8)",
                                                      " (in 'string', line 242, column 6 to line 244, column 8)",
                                                      " (in 'string', line 241, column 32 to line 245, column 6)",
                                                      " (in 'string', line 241, column 4 to line 245, column 6)",
                                                      " (in 'string', line 246, column 4 to column 34)",
                                                      " (in 'string', line 247, column 4 to column 57)",
                                                      " (in 'string', line 227, column 21 to line 248, column 3)",
                                                      " (in 'string', line 227, column 2 to line 248, column 3)",
                                                      " (in 'string', line 251, column 24 to column 31)",
                                                      " (in 'string', line 252, column 9 to column 16)",
                                                      " (in 'string', line 252, column 25 to column 26)",
                                                      " (in 'string', line 253, column 10 to column 19)",
                                                      " (in 'string', line 255, column 24 to column 33)",
                                                      " (in 'string', line 256, column 19 to column 29)",
                                                      " (in 'string', line 259, column 13 to column 20)",
                                                      " (in 'string', line 259, column 22 to column 27)",
                                                      " (in 'string', line 259, column 29 to column 33)",
                                                      " (in 'string', line 260, column 27 to column 34)",
                                                      " (in 'string', line 260, column 36 to column 37)",
                                                      " (in 'string', line 260, column 39 to column 40)",
                                                      " (in 'string', line 261, column 7 to column 14)",
                                                      " (in 'string', line 261, column 16 to column 17)",
                                                      " (in 'string', line 261, column 27 to column 28)",
                                                      " (in 'string', line 262, column 7 to column 14)",
                                                      " (in 'string', line 262, column 23 to column 24)",
                                                      " (in 'string', line 320, column 9 to column 10)",
                                                      " (in 'string', line 320, column 12 to column 13)",
                                                      " (in 'string', line 321, column 9 to column 10)",
                                                      " (in 'string', line 321, column 12 to column 13)",
                                                      " (in 'string', line 324, column 23 to column 30)",
                                                      " (in 'string', line 324, column 9 to column 10)",
                                                      " (in 'string', line 324, column 11 to column 12)",
                                                      " (in 'string', line 325, column 9 to column 10)",
                                                      " (in 'string', line 325, column 12 to column 13)",
                                                      " (in 'string', line 326, column 9 to column 10)",
                                                      " (in 'string', line 326, column 12 to column 13)",
                                                      " (in 'string', line 16, column 12 to column 19)",
                                                      " (in 'string', line 16, column 21 to column 22)",
                                                      " (in 'string', line 16, column 5 to column 34)",
                                                      " (in 'string', line 17, column 12 to column 19)",
                                                      " (in 'string', line 17, column 21 to column 22)",
                                                      " (in 'string', line 17, column 5 to column 34)",
                                                      " (in 'string', line 18, column 21 to column 28)",
                                                      " (in 'string', line 18, column 30 to column 31)",
                                                      " (in 'string', line 18, column 33 to column 34)",
                                                      " (in 'string', line 18, column 5 to column 36)",
                                                      " (in 'string', line 19, column 5 to column 25)",
                                                      " (in 'string', line 20, column 5 to column 25)",
                                                      " (in 'string', line 21, column 5 to column 22)",
                                                      " (in 'string', line 22, column 5 to column 22)",
                                                      " (in 'string', line 23, column 5 to column 13)",
                                                      " (in 'string', line 24, column 5 to column 25)",
                                                      " (in 'string', line 25, column 5 to column 20)",
                                                      " (in 'string', line 27, column 5 to column 27)",
                                                      " (in 'string', line 28, column 5 to column 27)",
                                                      " (in 'string', line 30, column 5 to column 22)",
                                                      " (in 'string', line 31, column 5 to column 19)",
                                                      " (in 'string', line 33, column 7 to column 33)",
                                                      " (in 'string', line 37, column 11 to column 74)",
                                                      " (in 'string', line 38, column 11 to column 38)",
                                                      " (in 'string', line 39, column 11 to column 40)",
                                                      " (in 'string', line 40, column 11 to column 40)",
                                                      " (in 'string', line 41, column 11 to column 38)",
                                                      " (in 'string', line 42, column 11 to column 53)",
                                                      " (in 'string', line 43, column 11 to column 86)",
                                                      " (in 'string', line 44, column 11 to column 62)",
                                                      " (in 'string', line 45, column 11 to column 62)",
                                                      " (in 'string', line 46, column 11 to column 36)",
                                                      " (in 'string', line 47, column 11 to column 91)",
                                                      " (in 'string', line 36, column 27 to line 48, column 10)",
                                                      " (in 'string', line 36, column 9 to line 48, column 10)",
                                                      " (in 'string', line 49, column 9 to column 45)",
                                                      " (in 'string', line 50, column 9 to column 35)",
                                                      " (in 'string', line 51, column 9 to column 61)",
                                                      " (in 'string', line 52, column 9 to column 61)",
                                                      " (in 'string', line 35, column 25 to line 53, column 8)",
                                                      " (in 'string', line 35, column 7 to line 53, column 8)",
                                                      " (in 'string', line 56, column 9 to column 45)",
                                                      " (in 'string', line 57, column 9 to column 35)",
                                                      " (in 'string', line 58, column 9 to column 61)",
                                                      " (in 'string', line 59, column 9 to column 61)",
                                                      " (in 'string', line 55, column 25 to line 60, column 8)",
                                                      " (in 'string', line 55, column 7 to line 60, column 8)",
                                                      " (in 'string', line 61, column 7 to column 30)",
                                                      " (in 'string', line 32, column 25 to line 62, column 6)",
                                                      " (in 'string', line 32, column 5 to line 62, column 6)",
                                                      " (in 'string', line 63, column 5 to column 23)",
                                                      " (in 'string', line 66, column 4 to column 24)",
                                                      " (in 'string', line 67, column 4 to column 22)",
                                                      " (in 'string', line 7, column 114 to line 68, column 3)",
                                                      " (in 'string', line 81, column 21 to column 28)",
                                                      " (in 'string', line 81, column 30 to column 31)",
                                                      " (in 'string', line 81, column 33 to column 34)",
                                                      " (in 'string', line 81, column 5 to column 36)",
                                                      " (in 'string', line 82, column 5 to column 25)",
                                                      " (in 'string', line 83, column 5 to column 25)",
                                                      " (in 'string', line 84, column 5 to column 22)",
                                                      " (in 'string', line 85, column 5 to column 22)",
                                                      " (in 'string', line 86, column 5 to column 13)",
                                                      " (in 'string', line 87, column 5 to column 16)",
                                                      " (in 'string', line 88, column 5 to column 16)",
                                                      " (in 'string', line 89, column 5 to column 25)",
                                                      " (in 'string', line 90, column 5 to column 20)",
                                                      " (in 'string', line 95, column 5 to column 22)",
                                                      " (in 'string', line 96, column 5 to column 19)",
                                                      " (in 'string', line 98, column 7 to column 31)",
                                                      " (in 'string', line 99, column 7 to column 31)",
                                                      " (in 'string', line 100, column 7 to column 18)",
                                                      " (in 'string', line 101, column 7 to column 18)",
                                                      " (in 'string', line 104, column 11 to column 23)",
                                                      " (in 'string', line 105, column 11 to column 64)",
                                                      " (in 'string', line 103, column 32 to line 106, column 10)",
                                                      " (in 'string', line 103, column 9 to line 106, column 10)",
                                                      " (in 'string', line 102, column 21 to line 107, column 8)",
                                                      " (in 'string', line 102, column 7 to line 107, column 8)",
                                                      " (in 'string', line 110, column 11 to column 23)",
                                                      " (in 'string', line 111, column 11 to column 64)",
                                                      " (in 'string', line 109, column 32 to line 112, column 10)",
                                                      " (in 'string', line 109, column 9 to line 112, column 10)",
                                                      " (in 'string', line 108, column 21 to line 114, column 8)",
                                                      " (in 'string', line 108, column 7 to line 114, column 8)",
                                                      " (in 'string', line 116, column 6 to column 24)",
                                                      " (in 'string', line 117, column 13 to column 19)",
                                                      " (in 'string', line 117, column 21 to column 27)",
                                                      " (in 'string', line 117, column 6 to column 44)",
                                                      " (in 'string', line 121, column 11 to column 68)",
                                                      " (in 'string', line 122, column 11 to column 38)",
                                                      " (in 'string', line 123, column 11 to column 37)",
                                                      " (in 'string', line 124, column 11 to column 37)",
                                                      " (in 'string', line 125, column 11 to column 38)",
                                                      " (in 'string', line 126, column 11 to column 53)",
                                                      " (in 'string', line 127, column 11 to column 87)",
                                                      " (in 'string', line 128, column 11 to column 59)",
                                                      " (in 'string', line 129, column 11 to column 59)",
                                                      " (in 'string', line 130, column 11 to column 42)",
                                                      " (in 'string', line 131, column 11 to column 91)",
                                                      " (in 'string', line 120, column 34 to line 132, column 10)",
                                                      " (in 'string', line 120, column 9 to line 132, column 10)",
                                                      " (in 'string', line 133, column 9 to column 48)",
                                                      " (in 'string', line 134, column 9 to column 45)",
                                                      " (in 'string', line 135, column 9 to column 75)",
                                                      " (in 'string', line 136, column 9 to column 65)",
                                                      " (in 'string', line 119, column 32 to line 137, column 8)",
                                                      " (in 'string', line 119, column 7 to line 137, column 8)",
                                                      " (in 'string', line 140, column 9 to column 50)",
                                                      " (in 'string', line 141, column 9 to column 44)",
                                                      " (in 'string', line 142, column 9 to column 65)",
                                                      " (in 'string', line 143, column 9 to column 75)",
                                                      " (in 'string', line 139, column 30 to line 144, column 8)",
                                                      " (in 'string', line 139, column 7 to line 144, column 8)",
                                                      " (in 'string', line 145, column 7 to column 41)",
                                                      " (in 'string', line 147, column 6 to column 17)",
                                                      " (in 'string', line 150, column 9 to column 17)",
                                                      " (in 'string', line 149, column 30 to line 151, column 8)",
                                                      " (in 'string', line 149, column 7 to line 151, column 8)",
                                                      " (in 'string', line 152, column 7 to column 18)",
                                                      " (in 'string', line 158, column 11 to column 35)",
                                                      " (in 'string', line 157, column 16 to line 159, column 10)",
                                                      " (in 'string', line 155, column 11 to column 19)",
                                                      " (in 'string', line 156, column 11 to column 56)",
                                                      " (in 'string', line 154, column 55 to line 157, column 10)",
                                                      " (in 'string', line 154, column 9 to line 159, column 10)",
                                                      " (in 'string', line 153, column 21 to line 160, column 8)",
                                                      " (in 'string', line 153, column 7 to line 160, column 8)",
                                                      " (in 'string', line 148, column 20 to line 162, column 6)",
                                                      " (in 'string', line 148, column 6 to line 162, column 6)",
                                                      " (in 'string', line 97, column 25 to line 163, column 6)",
                                                      " (in 'string', line 97, column 5 to line 163, column 6)",
                                                      " (in 'string', line 166, column 4 to column 24)",
                                                      " (in 'string', line 167, column 4 to column 22)",
                                                      " (in 'string', line 70, column 125 to line 168, column 3)",
                                                      " (in 'string', line 173, column 12 to column 19)",
                                                      " (in 'string', line 173, column 4 to column 21)",
                                                      " (in 'string', line 174, column 11 to column 18)",
                                                      " (in 'string', line 174, column 4 to column 25)",
                                                      " (in 'string', line 175, column 11 to column 18)",
                                                      " (in 'string', line 175, column 4 to column 27)",
                                                      " (in 'string', line 176, column 4 to column 23)",
                                                      " (in 'string', line 179, column 6 to column 23)",
                                                      " (in 'string', line 180, column 6 to column 59)",
                                                      " (in 'string', line 181, column 6 to column 55)",
                                                      " (in 'string', line 178, column 21 to line 182, column 5)",
                                                      " (in 'string', line 178, column 4 to line 182, column 5)",
                                                      " (in 'string', line 183, column 4 to column 21)",
                                                      " (in 'string', line 171, column 48 to line 184, column 3)",
                                                      " (in 'string', line 187, column 12 to column 19)",
                                                      " (in 'string', line 187, column 4 to column 21)",
                                                      " (in 'string', line 188, column 17 to column 24)",
                                                      " (in 'string', line 188, column 4 to column 26)",
                                                      " (in 'string', line 189, column 11 to column 18)",
                                                      " (in 'string', line 189, column 4 to column 25)",
                                                      " (in 'string', line 190, column 11 to column 18)",
                                                      " (in 'string', line 190, column 4 to column 27)",
                                                      " (in 'string', line 191, column 4 to column 23)",
                                                      " (in 'string', line 194, column 6 to column 23)",
                                                      " (in 'string', line 195, column 6 to column 33)",
                                                      " (in 'string', line 200, column 8 to column 86)",
                                                      " (in 'string', line 201, column 8 to column 97)",
                                                      " (in 'string', line 199, column 13 to line 202, column 7)",
                                                      " (in 'string', line 197, column 8 to column 22)",
                                                      " (in 'string', line 198, column 8 to column 20)",
                                                      " (in 'string', line 196, column 26 to line 199, column 7)",
                                                      " (in 'string', line 196, column 6 to line 202, column 7)",
                                                      " (in 'string', line 193, column 21 to line 203, column 5)",
                                                      " (in 'string', line 193, column 4 to line 203, column 5)",
                                                      " (in 'string', line 204, column 4 to column 21)",
                                                      " (in 'string', line 185, column 51 to line 205, column 3)",
                                                      " (in 'string', line 207, column 5 to column 25)",
                                                      " (in 'string', line 208, column 12 to column 13)",
                                                      " (in 'string', line 208, column 5 to column 37)",
                                                      " (in 'string', line 209, column 5 to column 24)",
                                                      " (in 'string', line 206, column 48 to line 210, column 3)"};
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
ss_assign_cvals_lp(const int& n_areas, const int& R, const int& C,
                   const T3__& row_margins_arg__,
                   const T4__& col_margins_arg__,
                   const std::vector<std::vector<std::vector<T5__>>>& lambda,
                   T_lp__& lp__, T_lp_accum__& lp_accum__,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          T5__>;
  const auto& row_margins = to_ref(row_margins_arg__);
  const auto& col_margins = to_ref(col_margins_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 158;
    validate_non_negative_index("slack_row", "n_areas", n_areas);
    current_statement__ = 159;
    validate_non_negative_index("slack_row", "R", R);
    Eigen::Matrix<local_scalar_t__, -1, -1> slack_row;
    slack_row = Eigen::Matrix<local_scalar_t__, -1, -1>(n_areas, R);
    stan::math::fill(slack_row, DUMMY_VAR__);
    
    current_statement__ = 161;
    validate_non_negative_index("slack_col", "n_areas", n_areas);
    current_statement__ = 162;
    validate_non_negative_index("slack_col", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, -1> slack_col;
    slack_col = Eigen::Matrix<local_scalar_t__, -1, -1>(n_areas, C);
    stan::math::fill(slack_col, DUMMY_VAR__);
    
    current_statement__ = 164;
    validate_non_negative_index("cell_value", "n_areas", n_areas);
    current_statement__ = 165;
    validate_non_negative_index("cell_value", "R", R);
    current_statement__ = 166;
    validate_non_negative_index("cell_value", "C", C);
    std::vector<std::vector<std::vector<local_scalar_t__>>> cell_value;
    cell_value = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(R, std::vector<local_scalar_t__>(C, DUMMY_VAR__)));
    
    Eigen::Matrix<local_scalar_t__, -1, 1> lower_pos;
    lower_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(lower_pos, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> upper_pos;
    upper_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(upper_pos, DUMMY_VAR__);
    
    local_scalar_t__ lower_bound;
    lower_bound = DUMMY_VAR__;
    
    local_scalar_t__ upper_bound;
    upper_bound = DUMMY_VAR__;
    
    local_scalar_t__ rt;
    rt = DUMMY_VAR__;
    
    local_scalar_t__ this_inv_logit;
    this_inv_logit = DUMMY_VAR__;
    
    local_scalar_t__ log_det_J;
    log_det_J = DUMMY_VAR__;
    
    current_statement__ = 175;
    assign(slack_row, nil_index_list(), row_margins,
      "assigning variable slack_row");
    current_statement__ = 176;
    assign(slack_col, nil_index_list(), col_margins,
      "assigning variable slack_col");
    current_statement__ = 177;
    assign(lower_pos, cons_list(index_uni(1), nil_index_list()), 0.0,
      "assigning variable lower_pos");
    current_statement__ = 178;
    log_det_J = 0;
    current_statement__ = 207;
    for (int j = 1; j <= n_areas; ++j) {
      current_statement__ = 179;
      rt = sum(row(slack_row, j));
      current_statement__ = 198;
      for (int r = 1; r <= (R - 1); ++r) {
        current_statement__ = 192;
        for (int c = 1; c <= (C - 1); ++c) {
          current_statement__ = 180;
          assign(lower_pos, cons_list(index_uni(2), nil_index_list()),
            (rvalue(slack_row,
               cons_list(index_uni(j),
                 cons_list(index_uni(r), nil_index_list())), "slack_row") -
              sum(tail(row(slack_col, j), (C - c)))),
            "assigning variable lower_pos");
          current_statement__ = 181;
          lower_bound = max(lower_pos);
          current_statement__ = 182;
          assign(upper_pos, cons_list(index_uni(1), nil_index_list()),
            rvalue(slack_col,
              cons_list(index_uni(j),
                cons_list(index_uni(c), nil_index_list())), "slack_col"),
            "assigning variable upper_pos");
          current_statement__ = 183;
          assign(upper_pos, cons_list(index_uni(2), nil_index_list()),
            rvalue(slack_row,
              cons_list(index_uni(j),
                cons_list(index_uni(r), nil_index_list())), "slack_row"),
            "assigning variable upper_pos");
          current_statement__ = 184;
          upper_bound = min(upper_pos);
          current_statement__ = 185;
          this_inv_logit = inv_logit(lambda[(j - 1)][(r - 1)][(c - 1)]);
          current_statement__ = 186;
          assign(cell_value,
            cons_list(index_uni(j),
              cons_list(index_uni(r),
                cons_list(index_uni(c), nil_index_list()))),
            (lower_bound + (this_inv_logit * (upper_bound - lower_bound))),
            "assigning variable cell_value");
          current_statement__ = 187;
          assign(slack_col,
            cons_list(index_uni(j),
              cons_list(index_uni(c), nil_index_list())),
            (rvalue(slack_col,
               cons_list(index_uni(j),
                 cons_list(index_uni(c), nil_index_list())), "slack_col") -
              cell_value[(j - 1)][(r - 1)][(c - 1)]),
            "assigning variable slack_col");
          current_statement__ = 188;
          assign(slack_row,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())),
            (rvalue(slack_row,
               cons_list(index_uni(j),
                 cons_list(index_uni(r), nil_index_list())), "slack_row") -
              cell_value[(j - 1)][(r - 1)][(c - 1)]),
            "assigning variable slack_row");
          current_statement__ = 189;
          rt = (rt - cell_value[(j - 1)][(r - 1)][(c - 1)]);
          current_statement__ = 190;
          log_det_J = (log_det_J +
                        stan::math::log(
                          (((upper_bound - lower_bound) * this_inv_logit) *
                            (1 - this_inv_logit))));}
        current_statement__ = 193;
        assign(cell_value,
          cons_list(index_uni(j),
            cons_list(index_uni(r),
              cons_list(index_uni(C), nil_index_list()))),
          rvalue(slack_row,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())), "slack_row"),
          "assigning variable cell_value");
        current_statement__ = 194;
        rt = (rt - cell_value[(j - 1)][(r - 1)][(C - 1)]);
        current_statement__ = 195;
        assign(slack_col,
          cons_list(index_uni(j), cons_list(index_uni(C), nil_index_list())),
          (rvalue(slack_col,
             cons_list(index_uni(j),
               cons_list(index_uni(C), nil_index_list())), "slack_col") -
            cell_value[(j - 1)][(r - 1)][(C - 1)]),
          "assigning variable slack_col");
        current_statement__ = 196;
        assign(slack_row,
          cons_list(index_uni(j), cons_list(index_uni(r), nil_index_list())),
          (rvalue(slack_row,
             cons_list(index_uni(j),
               cons_list(index_uni(r), nil_index_list())), "slack_row") -
            cell_value[(j - 1)][(r - 1)][(C - 1)]),
          "assigning variable slack_row");}
      current_statement__ = 204;
      for (int c = 1; c <= (C - 1); ++c) {
        current_statement__ = 199;
        assign(cell_value,
          cons_list(index_uni(j),
            cons_list(index_uni(R),
              cons_list(index_uni(c), nil_index_list()))),
          rvalue(slack_col,
            cons_list(index_uni(j),
              cons_list(index_uni(c), nil_index_list())), "slack_col"),
          "assigning variable cell_value");
        current_statement__ = 200;
        rt = (rt - cell_value[(j - 1)][(R - 1)][(c - 1)]);
        current_statement__ = 201;
        assign(slack_col,
          cons_list(index_uni(j), cons_list(index_uni(c), nil_index_list())),
          (rvalue(slack_col,
             cons_list(index_uni(j),
               cons_list(index_uni(c), nil_index_list())), "slack_col") -
            cell_value[(j - 1)][(R - 1)][(c - 1)]),
          "assigning variable slack_col");
        current_statement__ = 202;
        assign(slack_row,
          cons_list(index_uni(j), cons_list(index_uni(R), nil_index_list())),
          (rvalue(slack_row,
             cons_list(index_uni(j),
               cons_list(index_uni(R), nil_index_list())), "slack_row") -
            cell_value[(j - 1)][(R - 1)][(c - 1)]),
          "assigning variable slack_row");}
      current_statement__ = 205;
      assign(cell_value,
        cons_list(index_uni(j),
          cons_list(index_uni(R), cons_list(index_uni(C), nil_index_list()))),
        rt, "assigning variable cell_value");}
    current_statement__ = 208;
    if (pstream__) {
      stan_print(pstream__, cell_value);
      stan_print(pstream__, "\n");
    }
    current_statement__ = 209;
    lp_accum__.add(log_det_J);
    current_statement__ = 210;
    return cell_value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ss_assign_cvals_lp_functor__ {
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
operator()(const int& n_areas, const int& R, const int& C,
           const T3__& row_margins, const T4__& col_margins,
           const std::vector<std::vector<std::vector<T5__>>>& lambda,
           T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return ss_assign_cvals_lp<propto__>(n_areas, R, C, row_margins, col_margins,
         lambda, lp__, lp_accum__, pstream__);
}
};
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
ss_assign_cvals_wzeros_lp(const int& n_areas, const int& R, const int& C,
                          const T3__& row_margins_arg__,
                          const T4__& col_margins_arg__,
                          const std::vector<std::vector<std::vector<T5__>>>& lambda,
                          T_lp__& lp__, T_lp_accum__& lp_accum__,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          T5__>;
  const auto& row_margins = to_ref(row_margins_arg__);
  const auto& col_margins = to_ref(col_margins_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 212;
    validate_non_negative_index("cell_value", "n_areas", n_areas);
    current_statement__ = 213;
    validate_non_negative_index("cell_value", "R", R);
    current_statement__ = 214;
    validate_non_negative_index("cell_value", "C", C);
    std::vector<std::vector<std::vector<local_scalar_t__>>> cell_value;
    cell_value = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(R, std::vector<local_scalar_t__>(C, DUMMY_VAR__)));
    
    Eigen::Matrix<local_scalar_t__, -1, 1> lower_pos;
    lower_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(lower_pos, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> upper_pos;
    upper_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(upper_pos, DUMMY_VAR__);
    
    local_scalar_t__ lower_bound;
    lower_bound = DUMMY_VAR__;
    
    local_scalar_t__ upper_bound;
    upper_bound = DUMMY_VAR__;
    
    local_scalar_t__ rt;
    rt = DUMMY_VAR__;
    
    int free_R;
    free_R = std::numeric_limits<int>::min();
    
    int free_C;
    free_C = std::numeric_limits<int>::min();
    
    local_scalar_t__ this_inv_logit;
    this_inv_logit = DUMMY_VAR__;
    
    local_scalar_t__ log_det_J;
    log_det_J = DUMMY_VAR__;
    
    current_statement__ = 225;
    assign(lower_pos, cons_list(index_uni(1), nil_index_list()), 0.0,
      "assigning variable lower_pos");
    current_statement__ = 226;
    log_det_J = 0;
    current_statement__ = 289;
    for (int j = 1; j <= n_areas; ++j) {
      Eigen::Matrix<local_scalar_t__, 1, -1> slack_row;
      slack_row = Eigen::Matrix<local_scalar_t__, 1, -1>(0);
      stan::math::fill(slack_row, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> slack_col;
      slack_col = Eigen::Matrix<local_scalar_t__, 1, -1>(0);
      stan::math::fill(slack_col, DUMMY_VAR__);
      
      current_statement__ = 229;
      free_R = 0;
      current_statement__ = 230;
      free_C = 0;
      current_statement__ = 236;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 234;
        if (logical_gt(
              rvalue(row_margins,
                cons_list(index_uni(j),
                  cons_list(index_uni(r), nil_index_list())), "row_margins"),
              0)) {
          current_statement__ = 231;
          free_R = (free_R + 1);
          current_statement__ = 232;
          assign(slack_row, nil_index_list(),
            append_col(stan::model::deep_copy(slack_row),
              rvalue(row_margins,
                cons_list(index_uni(j),
                  cons_list(index_uni(r), nil_index_list())), "row_margins")),
            "assigning variable slack_row");
        } }
      current_statement__ = 242;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 240;
        if (logical_gt(
              rvalue(col_margins,
                cons_list(index_uni(j),
                  cons_list(index_uni(c), nil_index_list())), "col_margins"),
              0)) {
          current_statement__ = 237;
          free_C = (free_C + 1);
          current_statement__ = 238;
          assign(slack_col, nil_index_list(),
            append_col(stan::model::deep_copy(slack_col),
              rvalue(col_margins,
                cons_list(index_uni(j),
                  cons_list(index_uni(c), nil_index_list())), "col_margins")),
            "assigning variable slack_col");
        } }
      current_statement__ = 243;
      rt = sum(slack_row);
      current_statement__ = 244;
      validate_non_negative_index("tmp_cell_value", "free_R", free_R);
      current_statement__ = 245;
      validate_non_negative_index("tmp_cell_value", "free_C", free_C);
      Eigen::Matrix<local_scalar_t__, -1, -1> tmp_cell_value;
      tmp_cell_value = Eigen::Matrix<local_scalar_t__, -1, -1>(free_R, free_C);
      stan::math::fill(tmp_cell_value, DUMMY_VAR__);
      
      current_statement__ = 265;
      for (int r = 1; r <= (free_R - 1); ++r) {
        current_statement__ = 259;
        for (int c = 1; c <= (free_C - 1); ++c) {
          current_statement__ = 247;
          assign(lower_pos, cons_list(index_uni(2), nil_index_list()),
            (slack_row[(r - 1)] - sum(tail(slack_col, (free_C - c)))),
            "assigning variable lower_pos");
          current_statement__ = 248;
          lower_bound = max(lower_pos);
          current_statement__ = 249;
          assign(upper_pos, cons_list(index_uni(1), nil_index_list()),
            slack_col[(c - 1)], "assigning variable upper_pos");
          current_statement__ = 250;
          assign(upper_pos, cons_list(index_uni(2), nil_index_list()),
            slack_row[(r - 1)], "assigning variable upper_pos");
          current_statement__ = 251;
          upper_bound = min(upper_pos);
          current_statement__ = 252;
          this_inv_logit = inv_logit(lambda[(j - 1)][(r - 1)][(c - 1)]);
          current_statement__ = 253;
          assign(tmp_cell_value,
            cons_list(index_uni(r),
              cons_list(index_uni(c), nil_index_list())),
            (lower_bound + (this_inv_logit * (upper_bound - lower_bound))),
            "assigning variable tmp_cell_value");
          current_statement__ = 254;
          assign(slack_col, cons_list(index_uni(c), nil_index_list()),
            (slack_col[(c - 1)] -
              rvalue(tmp_cell_value,
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list())),
                "tmp_cell_value")), "assigning variable slack_col");
          current_statement__ = 255;
          assign(slack_row, cons_list(index_uni(r), nil_index_list()),
            (slack_row[(r - 1)] -
              rvalue(tmp_cell_value,
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list())),
                "tmp_cell_value")), "assigning variable slack_row");
          current_statement__ = 256;
          rt = (rt -
                 rvalue(tmp_cell_value,
                   cons_list(index_uni(r),
                     cons_list(index_uni(c), nil_index_list())),
                   "tmp_cell_value"));
          current_statement__ = 257;
          log_det_J = (log_det_J +
                        stan::math::log(
                          (((upper_bound - lower_bound) * this_inv_logit) *
                            (1 - this_inv_logit))));}
        current_statement__ = 260;
        assign(tmp_cell_value,
          cons_list(index_uni(r),
            cons_list(index_uni(free_C), nil_index_list())),
          slack_row[(r - 1)], "assigning variable tmp_cell_value");
        current_statement__ = 261;
        rt = (rt -
               rvalue(tmp_cell_value,
                 cons_list(index_uni(r),
                   cons_list(index_uni(free_C), nil_index_list())),
                 "tmp_cell_value"));
        current_statement__ = 262;
        assign(slack_col, cons_list(index_uni(free_C), nil_index_list()),
          (slack_col[(free_C - 1)] -
            rvalue(tmp_cell_value,
              cons_list(index_uni(r),
                cons_list(index_uni(free_C), nil_index_list())),
              "tmp_cell_value")), "assigning variable slack_col");
        current_statement__ = 263;
        assign(slack_row, cons_list(index_uni(r), nil_index_list()),
          (slack_row[(r - 1)] -
            rvalue(tmp_cell_value,
              cons_list(index_uni(r),
                cons_list(index_uni(free_C), nil_index_list())),
              "tmp_cell_value")), "assigning variable slack_row");}
      current_statement__ = 271;
      for (int c = 1; c <= (free_C - 1); ++c) {
        current_statement__ = 266;
        assign(tmp_cell_value,
          cons_list(index_uni(free_R),
            cons_list(index_uni(c), nil_index_list())), slack_col[(c - 1)],
          "assigning variable tmp_cell_value");
        current_statement__ = 267;
        rt = (rt -
               rvalue(tmp_cell_value,
                 cons_list(index_uni(free_R),
                   cons_list(index_uni(c), nil_index_list())),
                 "tmp_cell_value"));
        current_statement__ = 268;
        assign(slack_col, cons_list(index_uni(c), nil_index_list()),
          (slack_col[(c - 1)] -
            rvalue(tmp_cell_value,
              cons_list(index_uni(free_R),
                cons_list(index_uni(c), nil_index_list())), "tmp_cell_value")),
          "assigning variable slack_col");
        current_statement__ = 269;
        assign(slack_row, cons_list(index_uni(free_R), nil_index_list()),
          (slack_row[(free_R - 1)] -
            rvalue(tmp_cell_value,
              cons_list(index_uni(free_R),
                cons_list(index_uni(c), nil_index_list())), "tmp_cell_value")),
          "assigning variable slack_row");}
      current_statement__ = 272;
      assign(tmp_cell_value,
        cons_list(index_uni(free_R),
          cons_list(index_uni(free_C), nil_index_list())), rt,
        "assigning variable tmp_cell_value");
      int fr;
      fr = std::numeric_limits<int>::min();
      
      current_statement__ = 273;
      fr = 0;
      current_statement__ = 287;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 276;
        if (logical_gt(
              rvalue(row_margins,
                cons_list(index_uni(j),
                  cons_list(index_uni(r), nil_index_list())), "row_margins"),
              0)) {
          current_statement__ = 274;
          fr = (fr + 1);
        } 
        int fc;
        fc = std::numeric_limits<int>::min();
        
        current_statement__ = 277;
        fc = 0;
        current_statement__ = 285;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 283;
          if ((primitive_value(
              logical_gt(
                rvalue(col_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(c), nil_index_list())),
                  "col_margins"), 0)) && primitive_value(
              logical_gt(
                rvalue(row_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(r), nil_index_list())),
                  "row_margins"), 0)))) {
            current_statement__ = 280;
            fc = (fc + 1);
            current_statement__ = 281;
            assign(cell_value,
              cons_list(index_uni(j),
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list()))),
              rvalue(tmp_cell_value,
                cons_list(index_uni(fr),
                  cons_list(index_uni(fc), nil_index_list())),
                "tmp_cell_value"), "assigning variable cell_value");
          } else {
            current_statement__ = 278;
            assign(cell_value,
              cons_list(index_uni(j),
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list()))), 0,
              "assigning variable cell_value");
          }}}}
    current_statement__ = 290;
    lp_accum__.add(log_det_J);
    current_statement__ = 291;
    return cell_value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ss_assign_cvals_wzeros_lp_functor__ {
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T_lp__, typename T_lp_accum__>
std::vector<std::vector<std::vector<stan::promote_args_t<stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T5__>>>>
operator()(const int& n_areas, const int& R, const int& C,
           const T3__& row_margins, const T4__& col_margins,
           const std::vector<std::vector<std::vector<T5__>>>& lambda,
           T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return ss_assign_cvals_wzeros_lp<propto__>(n_areas, R, C, row_margins,
         col_margins, lambda, lp__, lp_accum__, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
realmultinom_lpdf(const T0__& x_arg__, const T1__& theta_arg__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x = to_ref(x_arg__);
  const auto& theta = to_ref(theta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 293;
    validate_non_negative_index("N", "rows(x)", rows(x));
    std::vector<local_scalar_t__> N;
    N = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 295;
    validate_non_negative_index("lpdf", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lpdf;
    lpdf = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lpdf, DUMMY_VAR__);
    
    current_statement__ = 297;
    validate_non_negative_index("lmcoef", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lmcoef;
    lmcoef = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lmcoef, DUMMY_VAR__);
    
    int emts;
    emts = std::numeric_limits<int>::min();
    
    current_statement__ = 299;
    emts = rows(x);
    current_statement__ = 304;
    for (int k = 1; k <= emts; ++k) {
      current_statement__ = 300;
      assign(N, cons_list(index_uni(k), nil_index_list()),
        sum(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
        "assigning variable N");
      current_statement__ = 301;
      assign(lmcoef, cons_list(index_uni(k), nil_index_list()),
        (stan::math::lgamma((N[(k - 1)] + 1)) -
          sum(
            stan::math::lgamma(
              add(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
                1)))), "assigning variable lmcoef");
      current_statement__ = 302;
      assign(lpdf, cons_list(index_uni(k), nil_index_list()),
        (lmcoef[(k - 1)] +
          sum(
            elt_multiply(
              rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
              stan::math::log(
                rvalue(theta, cons_list(index_uni(k), nil_index_list()),
                  "theta"))))), "assigning variable lpdf");}
    current_statement__ = 305;
    return sum(lpdf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct realmultinom_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& theta, std::ostream* pstream__)  const 
{
return realmultinom_lpdf<propto__>(x, theta, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
realdirmultinom_lpdf(const T0__& x_arg__, const T1__& theta_arg__,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x = to_ref(x_arg__);
  const auto& theta = to_ref(theta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 307;
    validate_non_negative_index("N", "rows(x)", rows(x));
    std::vector<local_scalar_t__> N;
    N = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 309;
    validate_non_negative_index("theta_0", "rows(x)", rows(x));
    std::vector<local_scalar_t__> theta_0;
    theta_0 = std::vector<local_scalar_t__>(rows(x), DUMMY_VAR__);
    
    current_statement__ = 311;
    validate_non_negative_index("lpdf", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lpdf;
    lpdf = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lpdf, DUMMY_VAR__);
    
    current_statement__ = 313;
    validate_non_negative_index("lmcoef", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> lmcoef;
    lmcoef = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(lmcoef, DUMMY_VAR__);
    
    int emts;
    emts = std::numeric_limits<int>::min();
    
    current_statement__ = 315;
    emts = rows(x);
    current_statement__ = 326;
    for (int k = 1; k <= emts; ++k) {
      current_statement__ = 316;
      assign(N, cons_list(index_uni(k), nil_index_list()),
        sum(rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
        "assigning variable N");
      current_statement__ = 317;
      assign(theta_0, cons_list(index_uni(k), nil_index_list()),
        sum(
          rvalue(theta, cons_list(index_uni(k), nil_index_list()), "theta")),
        "assigning variable theta_0");
      current_statement__ = 324;
      if (logical_eq(theta_0[(k - 1)], 0)) {
        current_statement__ = 321;
        assign(lmcoef, cons_list(index_uni(k), nil_index_list()), 0,
          "assigning variable lmcoef");
        current_statement__ = 322;
        assign(lpdf, cons_list(index_uni(k), nil_index_list()), 0,
          "assigning variable lpdf");
      } else {
        current_statement__ = 318;
        assign(lmcoef, cons_list(index_uni(k), nil_index_list()),
          ((stan::math::lgamma(theta_0[(k - 1)]) +
             stan::math::lgamma((N[(k - 1)] + 1))) -
            stan::math::lgamma((N[(k - 1)] + theta_0[(k - 1)]))),
          "assigning variable lmcoef");
        current_statement__ = 319;
        assign(lpdf, cons_list(index_uni(k), nil_index_list()),
          (lmcoef[(k - 1)] +
            sum(
              subtract(
                subtract(
                  stan::math::lgamma(
                    add(
                      rvalue(theta,
                        cons_list(index_uni(k), nil_index_list()), "theta"),
                      rvalue(x, cons_list(index_uni(k), nil_index_list()),
                        "x"))),
                  stan::math::lgamma(
                    rvalue(theta, cons_list(index_uni(k), nil_index_list()),
                      "theta"))),
                stan::math::lgamma(
                  add(
                    rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"),
                    1))))), "assigning variable lpdf");
      }}
    current_statement__ = 327;
    return sum(lpdf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct realdirmultinom_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& theta, std::ostream* pstream__)  const 
{
return realdirmultinom_lpdf<propto__>(x, theta, pstream__);
}
};
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
simplex_constrain_softmax_lp(const T0__& v_arg__, T_lp__& lp__,
                             T_lp_accum__& lp_accum__,
                             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& v = to_ref(v_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 329;
    K = (stan::math::size(v) + 1);
    current_statement__ = 330;
    validate_non_negative_index("v0", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> v0;
    v0 = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(v0, DUMMY_VAR__);
    
    current_statement__ = 331;
    assign(v0, nil_index_list(), append_row(0, v), "assigning variable v0");
    current_statement__ = 332;
    return softmax(v0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct simplex_constrain_softmax_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& v, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return simplex_constrain_softmax_lp<propto__>(v, lp__, lp_accum__, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_ssContextual final : public model_base_crtp<model_ssContextual> {
private:
  int n_areas;
  int R;
  int C;
  Eigen::Matrix<double, -1, -1> row_margins;
  Eigen::Matrix<double, -1, -1> col_margins;
  int K;
  std::vector<int> free_R;
  std::vector<int> free_C;
  std::vector<std::vector<std::vector<double>>> param_map;
  int n_param;
  std::vector<int> param_count_from;
  int mu_1dim__;
  int L_1dim__;
  int L_2dim__;
  int sigma_1dim__;
  int lambda_2dim__;
  int lambda_3dim__;
 
public:
  ~model_ssContextual() { }
  
  inline std::string model_name() const final { return "model_ssContextual"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_ssContextual(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ssContextual_namespace::model_ssContextual";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 87;
      context__.validate_dims("data initialization","n_areas","int",
          context__.to_vec());
      n_areas = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      n_areas = context__.vals_i("n_areas")[(1 - 1)];
      current_statement__ = 87;
      current_statement__ = 87;
      check_greater_or_equal(function__, "n_areas", n_areas, 0);
      current_statement__ = 88;
      context__.validate_dims("data initialization","R","int",
          context__.to_vec());
      R = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 88;
      current_statement__ = 88;
      check_greater_or_equal(function__, "R", R, 0);
      current_statement__ = 89;
      context__.validate_dims("data initialization","C","int",
          context__.to_vec());
      C = std::numeric_limits<int>::min();
      
      current_statement__ = 89;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 89;
      current_statement__ = 89;
      check_greater_or_equal(function__, "C", C, 0);
      current_statement__ = 90;
      validate_non_negative_index("row_margins", "n_areas", n_areas);
      current_statement__ = 91;
      validate_non_negative_index("row_margins", "R", R);
      current_statement__ = 92;
      context__.validate_dims("data initialization","row_margins","double",
          context__.to_vec(n_areas, R));
      row_margins = Eigen::Matrix<double, -1, -1>(n_areas, R);
      stan::math::fill(row_margins, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> row_margins_flat__;
        current_statement__ = 92;
        assign(row_margins_flat__, nil_index_list(),
          context__.vals_r("row_margins"),
          "assigning variable row_margins_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            current_statement__ = 92;
            assign(row_margins,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              row_margins_flat__[(pos__ - 1)],
              "assigning variable row_margins");
            current_statement__ = 92;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 92;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 92;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 92;
          current_statement__ = 92;
          check_greater_or_equal(function__, "row_margins[sym1__, sym2__]",
                                 rvalue(row_margins,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "row_margins"), 0);
        }}
      current_statement__ = 93;
      validate_non_negative_index("col_margins", "n_areas", n_areas);
      current_statement__ = 94;
      validate_non_negative_index("col_margins", "C", C);
      current_statement__ = 95;
      context__.validate_dims("data initialization","col_margins","double",
          context__.to_vec(n_areas, C));
      col_margins = Eigen::Matrix<double, -1, -1>(n_areas, C);
      stan::math::fill(col_margins, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> col_margins_flat__;
        current_statement__ = 95;
        assign(col_margins_flat__, nil_index_list(),
          context__.vals_r("col_margins"),
          "assigning variable col_margins_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            current_statement__ = 95;
            assign(col_margins,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              col_margins_flat__[(pos__ - 1)],
              "assigning variable col_margins");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 95;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 95;
        for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
          current_statement__ = 95;
          current_statement__ = 95;
          check_greater_or_equal(function__, "col_margins[sym1__, sym2__]",
                                 rvalue(col_margins,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "col_margins"), 0);
        }}
      current_statement__ = 96;
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      K = (R * (C - 1));
      current_statement__ = 97;
      validate_non_negative_index("free_R", "n_areas", n_areas);
      current_statement__ = 98;
      free_R = std::vector<int>(n_areas, std::numeric_limits<int>::min());
      
      current_statement__ = 99;
      validate_non_negative_index("free_C", "n_areas", n_areas);
      current_statement__ = 100;
      free_C = std::vector<int>(n_areas, std::numeric_limits<int>::min());
      
      current_statement__ = 101;
      validate_non_negative_index("param_map", "n_areas", n_areas);
      current_statement__ = 102;
      validate_non_negative_index("param_map", "R - 1", (R - 1));
      current_statement__ = 103;
      validate_non_negative_index("param_map", "C - 1", (C - 1));
      current_statement__ = 104;
      param_map = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(
        (R - 1), std::vector<double>((C - 1), std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 105;
      n_param = std::numeric_limits<int>::min();
      
      current_statement__ = 105;
      n_param = 0;
      current_statement__ = 106;
      validate_non_negative_index("param_count_from", "n_areas", n_areas);
      current_statement__ = 107;
      param_count_from = std::vector<int>(n_areas, std::numeric_limits<int>::min());
      
      current_statement__ = 129;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 108;
        assign(free_R, cons_list(index_uni(j), nil_index_list()), 0,
          "assigning variable free_R");
        current_statement__ = 109;
        assign(free_C, cons_list(index_uni(j), nil_index_list()), 0,
          "assigning variable free_C");
        current_statement__ = 114;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 112;
          if (logical_gt(
                rvalue(row_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(r), nil_index_list())),
                  "row_margins"), 0)) {
            current_statement__ = 110;
            assign(free_R, cons_list(index_uni(j), nil_index_list()),
              (free_R[(j - 1)] + 1), "assigning variable free_R");
          } }
        current_statement__ = 119;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 117;
          if (logical_gt(
                rvalue(col_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(c), nil_index_list())),
                  "col_margins"), 0)) {
            current_statement__ = 115;
            assign(free_C, cons_list(index_uni(j), nil_index_list()),
              (free_C[(j - 1)] + 1), "assigning variable free_C");
          } }
        current_statement__ = 120;
        assign(param_map, cons_list(index_uni(j), nil_index_list()),
          rep_array(0, (R - 1), (C - 1)), "assigning variable param_map");
        current_statement__ = 125;
        for (int r = 1; r <= (free_R[(j - 1)] - 1); ++r) {
          current_statement__ = 123;
          for (int c = 1; c <= (free_C[(j - 1)] - 1); ++c) {
            current_statement__ = 121;
            assign(param_map,
              cons_list(index_uni(j),
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list()))),
              ((n_param + ((r - 1) * (free_C[(j - 1)] - 1))) + c),
              "assigning variable param_map");}}
        current_statement__ = 126;
        assign(param_count_from, cons_list(index_uni(j), nil_index_list()),
          n_param, "assigning variable param_count_from");
        current_statement__ = 127;
        n_param = (n_param +
                    std::max(0,
                      ((free_R[(j - 1)] - 1) * (free_C[(j - 1)] - 1))));}
      current_statement__ = 130;
      validate_non_negative_index("lambda_unpadded", "n_param", n_param);
      current_statement__ = 131;
      validate_non_negative_index("alpha", "n_areas", n_areas);
      current_statement__ = 132;
      validate_non_negative_index("alpha", "K", K);
      current_statement__ = 133;
      mu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 133;
      mu_1dim__ = (R * (C - 1));
      current_statement__ = 133;
      validate_non_negative_index("mu", "R * (C - 1)", mu_1dim__);
      current_statement__ = 134;
      L_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      L_1dim__ = (R * (C - 1));
      current_statement__ = 134;
      validate_non_negative_index("L", "R * (C - 1)", L_1dim__);
      current_statement__ = 134;
      L_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      L_2dim__ = (R * (C - 1));
      current_statement__ = 134;
      validate_non_negative_index("L", "R * (C - 1)", L_2dim__);
      current_statement__ = 135;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 135;
      sigma_1dim__ = (R * (C - 1));
      current_statement__ = 135;
      validate_non_negative_index("sigma", "R * (C - 1)", sigma_1dim__);
      current_statement__ = 136;
      validate_non_negative_index("lambda", "n_areas", n_areas);
      current_statement__ = 137;
      lambda_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 137;
      lambda_2dim__ = (R - 1);
      current_statement__ = 137;
      validate_non_negative_index("lambda", "R - 1", lambda_2dim__);
      current_statement__ = 138;
      lambda_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      lambda_3dim__ = (C - 1);
      current_statement__ = 138;
      validate_non_negative_index("lambda", "C - 1", lambda_3dim__);
      current_statement__ = 139;
      validate_non_negative_index("cell_values", "n_areas", n_areas);
      current_statement__ = 140;
      validate_non_negative_index("cell_values", "R", R);
      current_statement__ = 141;
      validate_non_negative_index("cell_values", "C", C);
      current_statement__ = 142;
      validate_non_negative_index("theta_area", "n_areas", n_areas);
      current_statement__ = 143;
      validate_non_negative_index("theta_area", "R", R);
      current_statement__ = 144;
      validate_non_negative_index("theta_area", "C", C);
      current_statement__ = 145;
      validate_non_negative_index("eta_area", "n_areas", n_areas);
      current_statement__ = 146;
      validate_non_negative_index("eta_area", "K", K);
      current_statement__ = 147;
      validate_non_negative_index("Omega", "K", K);
      current_statement__ = 148;
      validate_non_negative_index("Omega", "K", K);
      current_statement__ = 149;
      validate_non_negative_index("Sigma", "K", K);
      current_statement__ = 150;
      validate_non_negative_index("Sigma", "K", K);
      current_statement__ = 151;
      validate_non_negative_index("row_rate", "n_areas", n_areas);
      current_statement__ = 152;
      validate_non_negative_index("row_rate", "R", R);
      current_statement__ = 153;
      validate_non_negative_index("row_rate", "C", C);
      current_statement__ = 154;
      validate_non_negative_index("overall_cell_values", "R", R);
      current_statement__ = 155;
      validate_non_negative_index("overall_cell_values", "C", C);
      current_statement__ = 156;
      validate_non_negative_index("overall_row_rate", "R", R);
      current_statement__ = 157;
      validate_non_negative_index("overall_row_rate", "C", C);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_param;
      num_params_r__ += n_areas * K;
      num_params_r__ += mu_1dim__;
      num_params_r__ += ((L_1dim__ * (L_1dim__ - 1)) / 2);
      num_params_r__ += sigma_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ssContextual_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> lambda_unpadded;
      lambda_unpadded = std::vector<local_scalar_t__>(n_param, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
        current_statement__ = 1;
        assign(lambda_unpadded,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable lambda_unpadded");}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> alpha;
      alpha = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_areas, Eigen::Matrix<local_scalar_t__, -1, 1>(K));
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(K), "assigning variable alpha");}
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(mu_1dim__);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 3;
      mu = in__.vector(mu_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(L_1dim__, L_2dim__);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((L_1dim__ *
                                                         (L_1dim__ - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((L_1dim__ * (L_1dim__ - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, L_1dim__, lp__),
          "assigning variable L");
      } else {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, L_1dim__),
          "assigning variable L");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 5;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 5;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      std::vector<std::vector<std::vector<local_scalar_t__>>> lambda;
      lambda = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(lambda_2dim__, std::vector<local_scalar_t__>(lambda_3dim__, DUMMY_VAR__)));
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> cell_values;
      cell_values = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_areas, std::vector<std::vector<local_scalar_t__>>(R, std::vector<local_scalar_t__>(C, DUMMY_VAR__)));
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> theta_area;
      theta_area = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(n_areas, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(R, Eigen::Matrix<local_scalar_t__, -1, 1>(C)));
      stan::math::fill(theta_area, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> eta_area;
      eta_area = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_areas, Eigen::Matrix<local_scalar_t__, -1, 1>(K));
      stan::math::fill(eta_area, DUMMY_VAR__);
      
      current_statement__ = 17;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 10;
        assign(lambda, cons_list(index_uni(j), nil_index_list()),
          rep_array(0, (R - 1), (C - 1)), "assigning variable lambda");
        current_statement__ = 15;
        for (int r = 1; r <= (free_R[(j - 1)] - 1); ++r) {
          current_statement__ = 13;
          for (int c = 1; c <= (free_C[(j - 1)] - 1); ++c) {
            current_statement__ = 11;
            assign(lambda,
              cons_list(index_uni(j),
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list()))),
              lambda_unpadded[(((param_count_from[(j - 1)] +
                                  ((r - 1) * (free_C[(j - 1)] - 1))) + c) -
                                1)], "assigning variable lambda");}}}
      current_statement__ = 18;
      assign(cell_values, nil_index_list(),
        ss_assign_cvals_wzeros_lp<false>(n_areas, R, C, row_margins,
          col_margins, lambda, lp__, lp_accum__, pstream__),
        "assigning variable cell_values");
      current_statement__ = 21;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 19;
        assign(eta_area, cons_list(index_uni(j), nil_index_list()),
          add(mu, elt_multiply(sigma, multiply(L, alpha[(j - 1)]))),
          "assigning variable eta_area");}
      current_statement__ = 26;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 24;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 22;
          assign(theta_area,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())),
            simplex_constrain_softmax_lp<false>(
              rvalue(eta_area,
                cons_list(index_uni(j),
                  cons_list(
                    index_min_max((((r - 1) * (C - 1)) + 1), ((((r - 1) *
                                                                 (C - 1)) +
                                                                C) - 1)),
                    nil_index_list())), "eta_area"), lp__, lp_accum__, pstream__),
            "assigning variable theta_area");}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_greater_or_equal(function__,
                                   "cell_values[sym1__, sym2__, sym3__]",
                                   cell_values[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 8;
          current_statement__ = 8;
          check_simplex(function__, "theta_area[sym1__, sym2__]",
                        theta_area[(sym1__ - 1)][(sym2__ - 1)]);}}
      {
        current_statement__ = 64;
        validate_non_negative_index("obs_prob", "n_areas * R", (n_areas * R));
        current_statement__ = 65;
        validate_non_negative_index("obs_prob", "C", C);
        Eigen::Matrix<local_scalar_t__, -1, -1> obs_prob;
        obs_prob = Eigen::Matrix<local_scalar_t__, -1, -1>((n_areas * R), C);
        stan::math::fill(obs_prob, DUMMY_VAR__);
        
        current_statement__ = 67;
        validate_non_negative_index("cell_values_matrix", "n_areas * R",
                                    (n_areas * R));
        current_statement__ = 68;
        validate_non_negative_index("cell_values_matrix", "C", C);
        Eigen::Matrix<local_scalar_t__, -1, -1> cell_values_matrix;
        cell_values_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(
          (n_areas * R), C);
        stan::math::fill(cell_values_matrix, DUMMY_VAR__);
        
        int counter;
        counter = std::numeric_limits<int>::min();
        
        current_statement__ = 70;
        counter = 1;
        current_statement__ = 73;
        for (int j = 1; j <= n_areas; ++j) {
          current_statement__ = 71;
          lp_accum__.add(std_normal_lpdf<propto__>(alpha[(j - 1)]));}
        current_statement__ = 74;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0, 5));
        current_statement__ = 75;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L, 2.0));
        current_statement__ = 76;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, 3));
        current_statement__ = 85;
        for (int j = 1; j <= n_areas; ++j) {
          current_statement__ = 83;
          for (int r = 1; r <= R; ++r) {
            current_statement__ = 80;
            for (int c = 1; c <= C; ++c) {
              current_statement__ = 77;
              assign(cell_values_matrix,
                cons_list(index_uni((((j - 1) * R) + r)),
                  cons_list(index_uni(c), nil_index_list())),
                cell_values[(j - 1)][(r - 1)][(c - 1)],
                "assigning variable cell_values_matrix");
              current_statement__ = 78;
              assign(obs_prob,
                cons_list(index_uni(counter),
                  cons_list(index_uni(c), nil_index_list())),
                (theta_area[(j - 1)][(r - 1)][(c - 1)] *
                  rvalue(row_margins,
                    cons_list(index_uni(j),
                      cons_list(index_uni(r), nil_index_list())),
                    "row_margins")), "assigning variable obs_prob");}
            current_statement__ = 81;
            counter = (counter + 1);}}
        current_statement__ = 86;
        lp_accum__.add(
          realdirmultinom_lpdf<false>(cell_values_matrix,
            obs_prob, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ssContextual_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> lambda_unpadded;
      lambda_unpadded = std::vector<double>(n_param, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
        current_statement__ = 1;
        assign(lambda_unpadded,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable lambda_unpadded");}
      std::vector<Eigen::Matrix<double, -1, 1>> alpha;
      alpha = std::vector<Eigen::Matrix<double, -1, 1>>(n_areas, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(K), "assigning variable alpha");}
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(mu_1dim__);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      mu = in__.vector(mu_1dim__);
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(L_1dim__, L_2dim__);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((L_1dim__ *
                                                         (L_1dim__ - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((L_1dim__ * (L_1dim__ - 1)) / 2));
      current_statement__ = 4;
      assign(L, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_in__, L_1dim__),
        "assigning variable L");
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      std::vector<std::vector<std::vector<double>>> lambda;
      lambda = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(lambda_2dim__, std::vector<double>(lambda_3dim__, std::numeric_limits<double>::quiet_NaN())));
      
      std::vector<std::vector<std::vector<double>>> cell_values;
      cell_values = std::vector<std::vector<std::vector<double>>>(n_areas, std::vector<std::vector<double>>(R, std::vector<double>(C, std::numeric_limits<double>::quiet_NaN())));
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> theta_area;
      theta_area = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n_areas, std::vector<Eigen::Matrix<double, -1, 1>>(R, Eigen::Matrix<double, -1, 1>(C)));
      stan::math::fill(theta_area, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> eta_area;
      eta_area = std::vector<Eigen::Matrix<double, -1, 1>>(n_areas, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(eta_area, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
        vars__.emplace_back(lambda_unpadded[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
          vars__.emplace_back(alpha[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 17;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 10;
        assign(lambda, cons_list(index_uni(j), nil_index_list()),
          rep_array(0, (R - 1), (C - 1)), "assigning variable lambda");
        current_statement__ = 15;
        for (int r = 1; r <= (free_R[(j - 1)] - 1); ++r) {
          current_statement__ = 13;
          for (int c = 1; c <= (free_C[(j - 1)] - 1); ++c) {
            current_statement__ = 11;
            assign(lambda,
              cons_list(index_uni(j),
                cons_list(index_uni(r),
                  cons_list(index_uni(c), nil_index_list()))),
              lambda_unpadded[(((param_count_from[(j - 1)] +
                                  ((r - 1) * (free_C[(j - 1)] - 1))) + c) -
                                1)], "assigning variable lambda");}}}
      current_statement__ = 18;
      assign(cell_values, nil_index_list(),
        ss_assign_cvals_wzeros_lp<false>(n_areas, R, C, row_margins,
          col_margins, lambda, lp__, lp_accum__, pstream__),
        "assigning variable cell_values");
      current_statement__ = 21;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 19;
        assign(eta_area, cons_list(index_uni(j), nil_index_list()),
          add(mu, elt_multiply(sigma, multiply(L, alpha[(j - 1)]))),
          "assigning variable eta_area");}
      current_statement__ = 26;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 24;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 22;
          assign(theta_area,
            cons_list(index_uni(j),
              cons_list(index_uni(r), nil_index_list())),
            simplex_constrain_softmax_lp<false>(
              rvalue(eta_area,
                cons_list(index_uni(j),
                  cons_list(
                    index_min_max((((r - 1) * (C - 1)) + 1), ((((r - 1) *
                                                                 (C - 1)) +
                                                                C) - 1)),
                    nil_index_list())), "eta_area"), lp__, lp_accum__, pstream__),
            "assigning variable theta_area");}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= C; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_greater_or_equal(function__,
                                   "cell_values[sym1__, sym2__, sym3__]",
                                   cell_values[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          current_statement__ = 8;
          current_statement__ = 8;
          check_simplex(function__, "theta_area[sym1__, sym2__]",
                        theta_area[(sym1__ - 1)][(sym2__ - 1)]);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              vars__.emplace_back(
                lambda[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              vars__.emplace_back(
                cell_values[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
              vars__.emplace_back(
                theta_area[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            vars__.emplace_back(eta_area[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(K, K);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(K, K);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> row_rate;
      row_rate = std::vector<Eigen::Matrix<double, -1, -1>>(n_areas, Eigen::Matrix<double, -1, -1>(R, C));
      stan::math::fill(row_rate, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> overall_cell_values;
      overall_cell_values = Eigen::Matrix<double, -1, -1>(R, C);
      stan::math::fill(overall_cell_values, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> overall_row_rate;
      overall_row_rate = Eigen::Matrix<double, -1, -1>(R, C);
      stan::math::fill(overall_row_rate, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 40;
      for (int j = 1; j <= n_areas; ++j) {
        current_statement__ = 38;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 36;
          if (logical_eq(
                rvalue(row_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(r), nil_index_list())),
                  "row_margins"), 0)) {
            current_statement__ = 34;
            assign(row_rate,
              cons_list(index_uni(j),
                cons_list(index_uni(r), nil_index_list())),
              rep_row_vector(-1, C), "assigning variable row_rate");
          } else {
            current_statement__ = 32;
            assign(row_rate,
              cons_list(index_uni(j),
                cons_list(index_uni(r), nil_index_list())),
              divide(to_row_vector(cell_values[(j - 1)][(r - 1)]),
                rvalue(row_margins,
                  cons_list(index_uni(j),
                    cons_list(index_uni(r), nil_index_list())),
                  "row_margins")), "assigning variable row_rate");
          }}}
      current_statement__ = 45;
      for (int r = 1; r <= R; ++r) {
        current_statement__ = 43;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 41;
          assign(overall_cell_values,
            cons_list(index_uni(r),
              cons_list(index_uni(c), nil_index_list())),
            sum(
              rvalue(cell_values,
                cons_list(index_min_max(1, n_areas),
                  cons_list(index_uni(r),
                    cons_list(index_uni(c), nil_index_list()))),
                "cell_values")), "assigning variable overall_cell_values");}}
      current_statement__ = 53;
      for (int r = 1; r <= R; ++r) {
        double this_row_sum;
        this_row_sum = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 46;
        this_row_sum = sum(
                         rvalue(overall_cell_values,
                           cons_list(index_uni(r), nil_index_list()),
                           "overall_cell_values"));
        current_statement__ = 51;
        if (logical_eq(this_row_sum, 0)) {
          current_statement__ = 49;
          assign(overall_row_rate, cons_list(index_uni(r), nil_index_list()),
            rep_row_vector(-1, C), "assigning variable overall_row_rate");
        } else {
          current_statement__ = 47;
          assign(overall_row_rate, cons_list(index_uni(r), nil_index_list()),
            divide(
              rvalue(overall_cell_values,
                cons_list(index_uni(r), nil_index_list()),
                "overall_cell_values"), this_row_sum),
            "assigning variable overall_row_rate");
        }}
      current_statement__ = 54;
      assign(Omega, nil_index_list(), multiply(L, transpose(L)),
        "assigning variable Omega");
      current_statement__ = 57;
      for (int m = 1; m <= K; ++m) {
        current_statement__ = 55;
        assign(Sigma,
          cons_list(index_uni(m), cons_list(index_uni(m), nil_index_list())),
          ((sigma[(m - 1)] * sigma[(m - 1)]) *
            rvalue(Omega,
              cons_list(index_uni(m),
                cons_list(index_uni(m), nil_index_list())), "Omega")),
          "assigning variable Sigma");}
      current_statement__ = 63;
      for (int m = 1; m <= (K - 1); ++m) {
        current_statement__ = 61;
        for (int n = (m + 1); n <= K; ++n) {
          current_statement__ = 58;
          assign(Sigma,
            cons_list(index_uni(m),
              cons_list(index_uni(n), nil_index_list())),
            ((sigma[(m - 1)] * sigma[(n - 1)]) *
              rvalue(Omega,
                cons_list(index_uni(m),
                  cons_list(index_uni(n), nil_index_list())), "Omega")),
            "assigning variable Sigma");
          current_statement__ = 59;
          assign(Sigma,
            cons_list(index_uni(n),
              cons_list(index_uni(m), nil_index_list())),
            rvalue(Sigma,
              cons_list(index_uni(m),
                cons_list(index_uni(n), nil_index_list())), "Sigma"),
            "assigning variable Sigma");}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Omega"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Sigma"));}}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
            vars__.emplace_back(
              rvalue(row_rate,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                "row_rate"));}}}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          vars__.emplace_back(
            rvalue(overall_cell_values,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "overall_cell_values"));}}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
          vars__.emplace_back(
            rvalue(overall_row_rate,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "overall_row_rate"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> lambda_unpadded;
      lambda_unpadded = std::vector<double>(n_param, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(lambda_unpadded, nil_index_list(),
        context__.vals_r("lambda_unpadded"),
        "assigning variable lambda_unpadded");
      std::vector<Eigen::Matrix<double, -1, 1>> alpha;
      alpha = std::vector<Eigen::Matrix<double, -1, 1>>(n_areas, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            current_statement__ = 2;
            assign(alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              alpha_flat__[(pos__ - 1)], "assigning variable alpha");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(mu_1dim__);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 3;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(L_1dim__, L_2dim__);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 4;
        assign(L_flat__, nil_index_list(), context__.vals_r("L"),
          "assigning variable L_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= L_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= L_1dim__; ++sym2__) {
            current_statement__ = 4;
            assign(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_flat__[(pos__ - 1)], "assigning variable L");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_free__;
      L_free__ = Eigen::Matrix<double, -1, 1>(((L_1dim__ * (L_1dim__ - 1)) /
                                                2));
      stan::math::fill(L_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(L_free__, nil_index_list(), stan::math::cholesky_corr_free(L),
        "assigning variable L_free__");
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 5;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
        vars__.emplace_back(lambda_unpadded[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_areas; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(alpha[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((L_1dim__ * (L_1dim__ - 1)) / 2);
           ++sym1__) { vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("lambda_unpadded");
    names__.emplace_back("alpha");
    names__.emplace_back("mu");
    names__.emplace_back("L");
    names__.emplace_back("sigma");
    names__.emplace_back("lambda");
    names__.emplace_back("cell_values");
    names__.emplace_back("theta_area");
    names__.emplace_back("eta_area");
    names__.emplace_back("Omega");
    names__.emplace_back("Sigma");
    names__.emplace_back("row_rate");
    names__.emplace_back("overall_cell_values");
    names__.emplace_back("overall_row_rate");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_param)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(mu_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L_1dim__),
                                             static_cast<size_t>(L_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(lambda_2dim__)
                                             ,
                                             static_cast<size_t>(lambda_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_areas),
                                             static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(R),
                                             static_cast<size_t>(C)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_unpadded" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= L_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "cell_values" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "theta_area" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_area" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "row_rate" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "overall_cell_values" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "overall_row_rate" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_param; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_unpadded" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((L_1dim__ * (L_1dim__ - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= lambda_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= lambda_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "cell_values" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= (C - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "theta_area" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_areas; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_area" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_areas; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "row_rate" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "overall_cell_values" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "overall_row_rate" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda_unpadded\",\"type\":{\"name\":\"array\",\"length\":" << n_param << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << mu_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << L_1dim__ << ",\"cols\":" << L_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_2dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_3dim__ << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"cell_values\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"array\",\"length\":" << C << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_area\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"vector\",\"length\":" << C << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"eta_area\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"row_rate\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "}},\"block\":\"generated_quantities\"},{\"name\":\"overall_cell_values\",\"type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "},\"block\":\"generated_quantities\"},{\"name\":\"overall_row_rate\",\"type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda_unpadded\",\"type\":{\"name\":\"array\",\"length\":" << n_param << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << mu_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" << ((L_1dim__ * (L_1dim__ - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_2dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << lambda_3dim__ << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"cell_values\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"array\",\"length\":" << C << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_area\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"array\",\"length\":" << R << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (C - 1) << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"eta_area\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"row_rate\",\"type\":{\"name\":\"array\",\"length\":" << n_areas << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "}},\"block\":\"generated_quantities\"},{\"name\":\"overall_cell_values\",\"type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "},\"block\":\"generated_quantities\"},{\"name\":\"overall_row_rate\",\"type\":{\"name\":\"matrix\",\"rows\":" << R << ",\"cols\":" << C << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ssContextual_namespace::model_ssContextual;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ssContextual_namespace::profiles__;
}
#endif
#endif
